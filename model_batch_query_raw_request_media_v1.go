/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the BatchQueryRawRequestMediaV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchQueryRawRequestMediaV1{}

// BatchQueryRawRequestMediaV1 struct for BatchQueryRawRequestMediaV1
type BatchQueryRawRequestMediaV1 struct {
	// From timestamp
	From *time.Time `json:"from,omitempty"`
	// Data selection query (e.g. property.2a99729d-2556-4220-a139-023348a1e6b5 or thing.95717675-4786-4ffc-afcc-799777755391)
	Q string `json:"q"`
	// Maximum number of values returned, if any (default/limit: 1000, 10000 in case of thing query)
	SeriesLimit *int64 `json:"series_limit,omitempty"`
	// Sorting
	Sort *string `json:"sort,omitempty"`
	// To timestamp
	To *time.Time `json:"to,omitempty"`
}

type _BatchQueryRawRequestMediaV1 BatchQueryRawRequestMediaV1

// NewBatchQueryRawRequestMediaV1 instantiates a new BatchQueryRawRequestMediaV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchQueryRawRequestMediaV1(q string) *BatchQueryRawRequestMediaV1 {
	this := BatchQueryRawRequestMediaV1{}
	this.Q = q
	var sort string = "DESC"
	this.Sort = &sort
	return &this
}

// NewBatchQueryRawRequestMediaV1WithDefaults instantiates a new BatchQueryRawRequestMediaV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchQueryRawRequestMediaV1WithDefaults() *BatchQueryRawRequestMediaV1 {
	this := BatchQueryRawRequestMediaV1{}
	var sort string = "DESC"
	this.Sort = &sort
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *BatchQueryRawRequestMediaV1) GetFrom() time.Time {
	if o == nil || IsNil(o.From) {
		var ret time.Time
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchQueryRawRequestMediaV1) GetFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *BatchQueryRawRequestMediaV1) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given time.Time and assigns it to the From field.
func (o *BatchQueryRawRequestMediaV1) SetFrom(v time.Time) {
	o.From = &v
}

// GetQ returns the Q field value
func (o *BatchQueryRawRequestMediaV1) GetQ() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Q
}

// GetQOk returns a tuple with the Q field value
// and a boolean to check if the value has been set.
func (o *BatchQueryRawRequestMediaV1) GetQOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Q, true
}

// SetQ sets field value
func (o *BatchQueryRawRequestMediaV1) SetQ(v string) {
	o.Q = v
}

// GetSeriesLimit returns the SeriesLimit field value if set, zero value otherwise.
func (o *BatchQueryRawRequestMediaV1) GetSeriesLimit() int64 {
	if o == nil || IsNil(o.SeriesLimit) {
		var ret int64
		return ret
	}
	return *o.SeriesLimit
}

// GetSeriesLimitOk returns a tuple with the SeriesLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchQueryRawRequestMediaV1) GetSeriesLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SeriesLimit) {
		return nil, false
	}
	return o.SeriesLimit, true
}

// HasSeriesLimit returns a boolean if a field has been set.
func (o *BatchQueryRawRequestMediaV1) HasSeriesLimit() bool {
	if o != nil && !IsNil(o.SeriesLimit) {
		return true
	}

	return false
}

// SetSeriesLimit gets a reference to the given int64 and assigns it to the SeriesLimit field.
func (o *BatchQueryRawRequestMediaV1) SetSeriesLimit(v int64) {
	o.SeriesLimit = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *BatchQueryRawRequestMediaV1) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchQueryRawRequestMediaV1) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *BatchQueryRawRequestMediaV1) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *BatchQueryRawRequestMediaV1) SetSort(v string) {
	o.Sort = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *BatchQueryRawRequestMediaV1) GetTo() time.Time {
	if o == nil || IsNil(o.To) {
		var ret time.Time
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchQueryRawRequestMediaV1) GetToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *BatchQueryRawRequestMediaV1) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given time.Time and assigns it to the To field.
func (o *BatchQueryRawRequestMediaV1) SetTo(v time.Time) {
	o.To = &v
}

func (o BatchQueryRawRequestMediaV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchQueryRawRequestMediaV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	toSerialize["q"] = o.Q
	if !IsNil(o.SeriesLimit) {
		toSerialize["series_limit"] = o.SeriesLimit
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

func (o *BatchQueryRawRequestMediaV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"q",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchQueryRawRequestMediaV1 := _BatchQueryRawRequestMediaV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchQueryRawRequestMediaV1)

	if err != nil {
		return err
	}

	*o = BatchQueryRawRequestMediaV1(varBatchQueryRawRequestMediaV1)

	return err
}

type NullableBatchQueryRawRequestMediaV1 struct {
	value *BatchQueryRawRequestMediaV1
	isSet bool
}

func (v NullableBatchQueryRawRequestMediaV1) Get() *BatchQueryRawRequestMediaV1 {
	return v.value
}

func (v *NullableBatchQueryRawRequestMediaV1) Set(val *BatchQueryRawRequestMediaV1) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchQueryRawRequestMediaV1) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchQueryRawRequestMediaV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchQueryRawRequestMediaV1(val *BatchQueryRawRequestMediaV1) *NullableBatchQueryRawRequestMediaV1 {
	return &NullableBatchQueryRawRequestMediaV1{value: val, isSet: true}
}

func (v NullableBatchQueryRawRequestMediaV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchQueryRawRequestMediaV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


