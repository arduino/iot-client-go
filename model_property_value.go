/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PropertyValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyValue{}

// PropertyValue PropertyValuePayload describes a property value
type PropertyValue struct {
	// The device who send the property
	DeviceId *string `json:"device_id,omitempty"`
	// The property value
	Value interface{} `json:"value"`
}

type _PropertyValue PropertyValue

// NewPropertyValue instantiates a new PropertyValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyValue(value interface{}) *PropertyValue {
	this := PropertyValue{}
	this.Value = value
	return &this
}

// NewPropertyValueWithDefaults instantiates a new PropertyValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyValueWithDefaults() *PropertyValue {
	this := PropertyValue{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *PropertyValue) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyValue) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *PropertyValue) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *PropertyValue) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PropertyValue) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PropertyValue) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PropertyValue) SetValue(v interface{}) {
	o.Value = v
}

func (o PropertyValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *PropertyValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPropertyValue := _PropertyValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPropertyValue)

	if err != nil {
		return err
	}

	*o = PropertyValue(varPropertyValue)

	return err
}

type NullablePropertyValue struct {
	value *PropertyValue
	isSet bool
}

func (v NullablePropertyValue) Get() *PropertyValue {
	return v.value
}

func (v *NullablePropertyValue) Set(val *PropertyValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyValue(val *PropertyValue) *NullablePropertyValue {
	return &NullablePropertyValue{value: val, isSet: true}
}

func (v NullablePropertyValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


