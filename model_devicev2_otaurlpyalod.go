/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the Devicev2Otaurlpyalod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Devicev2Otaurlpyalod{}

// Devicev2Otaurlpyalod struct for Devicev2Otaurlpyalod
type Devicev2Otaurlpyalod struct {
	// The object key of the binary
	BinaryKey *string `json:"binary_key,omitempty" validate:"regexp=^ota\\/[a-zA-Z0-9_-]+\\/[a-zA-Z0-9_-]+.ota$"`
	// The sha256 of the binary
	Sha256 *string `json:"sha256,omitempty" validate:"regexp=^[a-fA-F0-9]{64}$"`
	// The id of the user who is requesting the url
	UserId *string `json:"user_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Devicev2Otaurlpyalod Devicev2Otaurlpyalod

// NewDevicev2Otaurlpyalod instantiates a new Devicev2Otaurlpyalod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicev2Otaurlpyalod() *Devicev2Otaurlpyalod {
	this := Devicev2Otaurlpyalod{}
	return &this
}

// NewDevicev2OtaurlpyalodWithDefaults instantiates a new Devicev2Otaurlpyalod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicev2OtaurlpyalodWithDefaults() *Devicev2Otaurlpyalod {
	this := Devicev2Otaurlpyalod{}
	return &this
}

// GetBinaryKey returns the BinaryKey field value if set, zero value otherwise.
func (o *Devicev2Otaurlpyalod) GetBinaryKey() string {
	if o == nil || IsNil(o.BinaryKey) {
		var ret string
		return ret
	}
	return *o.BinaryKey
}

// GetBinaryKeyOk returns a tuple with the BinaryKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2Otaurlpyalod) GetBinaryKeyOk() (*string, bool) {
	if o == nil || IsNil(o.BinaryKey) {
		return nil, false
	}
	return o.BinaryKey, true
}

// HasBinaryKey returns a boolean if a field has been set.
func (o *Devicev2Otaurlpyalod) HasBinaryKey() bool {
	if o != nil && !IsNil(o.BinaryKey) {
		return true
	}

	return false
}

// SetBinaryKey gets a reference to the given string and assigns it to the BinaryKey field.
func (o *Devicev2Otaurlpyalod) SetBinaryKey(v string) {
	o.BinaryKey = &v
}

// GetSha256 returns the Sha256 field value if set, zero value otherwise.
func (o *Devicev2Otaurlpyalod) GetSha256() string {
	if o == nil || IsNil(o.Sha256) {
		var ret string
		return ret
	}
	return *o.Sha256
}

// GetSha256Ok returns a tuple with the Sha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2Otaurlpyalod) GetSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.Sha256) {
		return nil, false
	}
	return o.Sha256, true
}

// HasSha256 returns a boolean if a field has been set.
func (o *Devicev2Otaurlpyalod) HasSha256() bool {
	if o != nil && !IsNil(o.Sha256) {
		return true
	}

	return false
}

// SetSha256 gets a reference to the given string and assigns it to the Sha256 field.
func (o *Devicev2Otaurlpyalod) SetSha256(v string) {
	o.Sha256 = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Devicev2Otaurlpyalod) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2Otaurlpyalod) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Devicev2Otaurlpyalod) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Devicev2Otaurlpyalod) SetUserId(v string) {
	o.UserId = &v
}

func (o Devicev2Otaurlpyalod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Devicev2Otaurlpyalod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BinaryKey) {
		toSerialize["binary_key"] = o.BinaryKey
	}
	if !IsNil(o.Sha256) {
		toSerialize["sha256"] = o.Sha256
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Devicev2Otaurlpyalod) UnmarshalJSON(data []byte) (err error) {
	varDevicev2Otaurlpyalod := _Devicev2Otaurlpyalod{}

	err = json.Unmarshal(data, &varDevicev2Otaurlpyalod)

	if err != nil {
		return err
	}

	*o = Devicev2Otaurlpyalod(varDevicev2Otaurlpyalod)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "binary_key")
		delete(additionalProperties, "sha256")
		delete(additionalProperties, "user_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevicev2Otaurlpyalod struct {
	value *Devicev2Otaurlpyalod
	isSet bool
}

func (v NullableDevicev2Otaurlpyalod) Get() *Devicev2Otaurlpyalod {
	return v.value
}

func (v *NullableDevicev2Otaurlpyalod) Set(val *Devicev2Otaurlpyalod) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicev2Otaurlpyalod) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicev2Otaurlpyalod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicev2Otaurlpyalod(val *Devicev2Otaurlpyalod) *NullableDevicev2Otaurlpyalod {
	return &NullableDevicev2Otaurlpyalod{value: val, isSet: true}
}

func (v NullableDevicev2Otaurlpyalod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicev2Otaurlpyalod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


