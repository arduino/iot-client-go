/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ArduinoTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoTrigger{}

// ArduinoTrigger ArduinoTrigger media type (default view)
type ArduinoTrigger struct {
	// A list of actions associated with the trigger
	Actions []ArduinoAction `json:"actions,omitempty"`
	// Is true if the trigger is enabled
	Active *bool `json:"active,omitempty"`
	// Creation date of the trigger
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Id of the user who last updated the trigger
	CreatedBy *string `json:"created_by,omitempty"`
	// Deletion date of the trigger
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The description of the trigger
	Description *string `json:"description,omitempty"`
	DeviceStatusSource *DeviceStatusSource `json:"device_status_source,omitempty"`
	// The id of the trigger
	Id *string `json:"id,omitempty"`
	// The name of the trigger
	Name string `json:"name"`
	// Id of the organization the trigger belongs to
	OrganizationId *string `json:"organization_id,omitempty"`
	// Id of the property the trigger is associated to (mutually exclusive with 'device_status_source')
	PropertyId *string `json:"property_id,omitempty"`
	// Update date of the trigger
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type _ArduinoTrigger ArduinoTrigger

// NewArduinoTrigger instantiates a new ArduinoTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoTrigger(name string) *ArduinoTrigger {
	this := ArduinoTrigger{}
	this.Name = name
	return &this
}

// NewArduinoTriggerWithDefaults instantiates a new ArduinoTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoTriggerWithDefaults() *ArduinoTrigger {
	this := ArduinoTrigger{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetActions() []ArduinoAction {
	if o == nil || IsNil(o.Actions) {
		var ret []ArduinoAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetActionsOk() ([]ArduinoAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []ArduinoAction and assigns it to the Actions field.
func (o *ArduinoTrigger) SetActions(v []ArduinoAction) {
	o.Actions = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ArduinoTrigger) SetActive(v bool) {
	o.Active = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ArduinoTrigger) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *ArduinoTrigger) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *ArduinoTrigger) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ArduinoTrigger) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceStatusSource returns the DeviceStatusSource field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetDeviceStatusSource() DeviceStatusSource {
	if o == nil || IsNil(o.DeviceStatusSource) {
		var ret DeviceStatusSource
		return ret
	}
	return *o.DeviceStatusSource
}

// GetDeviceStatusSourceOk returns a tuple with the DeviceStatusSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetDeviceStatusSourceOk() (*DeviceStatusSource, bool) {
	if o == nil || IsNil(o.DeviceStatusSource) {
		return nil, false
	}
	return o.DeviceStatusSource, true
}

// HasDeviceStatusSource returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasDeviceStatusSource() bool {
	if o != nil && !IsNil(o.DeviceStatusSource) {
		return true
	}

	return false
}

// SetDeviceStatusSource gets a reference to the given DeviceStatusSource and assigns it to the DeviceStatusSource field.
func (o *ArduinoTrigger) SetDeviceStatusSource(v DeviceStatusSource) {
	o.DeviceStatusSource = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArduinoTrigger) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ArduinoTrigger) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArduinoTrigger) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ArduinoTrigger) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetPropertyId() string {
	if o == nil || IsNil(o.PropertyId) {
		var ret string
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyId) {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasPropertyId() bool {
	if o != nil && !IsNil(o.PropertyId) {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given string and assigns it to the PropertyId field.
func (o *ArduinoTrigger) SetPropertyId(v string) {
	o.PropertyId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ArduinoTrigger) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoTrigger) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ArduinoTrigger) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ArduinoTrigger) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ArduinoTrigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DeviceStatusSource) {
		toSerialize["device_status_source"] = o.DeviceStatusSource
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.PropertyId) {
		toSerialize["property_id"] = o.PropertyId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

func (o *ArduinoTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoTrigger := _ArduinoTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoTrigger)

	if err != nil {
		return err
	}

	*o = ArduinoTrigger(varArduinoTrigger)

	return err
}

type NullableArduinoTrigger struct {
	value *ArduinoTrigger
	isSet bool
}

func (v NullableArduinoTrigger) Get() *ArduinoTrigger {
	return v.value
}

func (v *NullableArduinoTrigger) Set(val *ArduinoTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoTrigger(val *ArduinoTrigger) *NullableArduinoTrigger {
	return &NullableArduinoTrigger{value: val, isSet: true}
}

func (v NullableArduinoTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


