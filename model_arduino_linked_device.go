/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ArduinoLinkedDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoLinkedDevice{}

// ArduinoLinkedDevice ArduinoLinked_device media type (default view)
type ArduinoLinkedDevice struct {
	Device ArduinoDevicev2 `json:"device"`
	// The status of the linked device
	Status string `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _ArduinoLinkedDevice ArduinoLinkedDevice

// NewArduinoLinkedDevice instantiates a new ArduinoLinkedDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoLinkedDevice(device ArduinoDevicev2, status string) *ArduinoLinkedDevice {
	this := ArduinoLinkedDevice{}
	this.Device = device
	this.Status = status
	return &this
}

// NewArduinoLinkedDeviceWithDefaults instantiates a new ArduinoLinkedDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoLinkedDeviceWithDefaults() *ArduinoLinkedDevice {
	this := ArduinoLinkedDevice{}
	return &this
}

// GetDevice returns the Device field value
func (o *ArduinoLinkedDevice) GetDevice() ArduinoDevicev2 {
	if o == nil {
		var ret ArduinoDevicev2
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *ArduinoLinkedDevice) GetDeviceOk() (*ArduinoDevicev2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *ArduinoLinkedDevice) SetDevice(v ArduinoDevicev2) {
	o.Device = v
}

// GetStatus returns the Status field value
func (o *ArduinoLinkedDevice) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ArduinoLinkedDevice) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ArduinoLinkedDevice) SetStatus(v string) {
	o.Status = v
}

func (o ArduinoLinkedDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoLinkedDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device"] = o.Device
	toSerialize["status"] = o.Status

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArduinoLinkedDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoLinkedDevice := _ArduinoLinkedDevice{}

	err = json.Unmarshal(data, &varArduinoLinkedDevice)

	if err != nil {
		return err
	}

	*o = ArduinoLinkedDevice(varArduinoLinkedDevice)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArduinoLinkedDevice struct {
	value *ArduinoLinkedDevice
	isSet bool
}

func (v NullableArduinoLinkedDevice) Get() *ArduinoLinkedDevice {
	return v.value
}

func (v *NullableArduinoLinkedDevice) Set(val *ArduinoLinkedDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoLinkedDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoLinkedDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoLinkedDevice(val *ArduinoLinkedDevice) *NullableArduinoLinkedDevice {
	return &NullableArduinoLinkedDevice{value: val, isSet: true}
}

func (v NullableArduinoLinkedDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoLinkedDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


