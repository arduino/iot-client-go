/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArduinoCredentialsv1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoCredentialsv1{}

// ArduinoCredentialsv1 ArduinoCredentialsv1 media type (default view)
type ArduinoCredentialsv1 struct {
	// Friendly name
	FriendlyName string `json:"friendly_name"`
	// Tell if the parameter is required or not
	Required bool `json:"required"`
	// The secret parameter name
	SecretName string `json:"secret_name"`
	// Tell if the field is sensitive
	Sensitive bool `json:"sensitive"`
}

type _ArduinoCredentialsv1 ArduinoCredentialsv1

// NewArduinoCredentialsv1 instantiates a new ArduinoCredentialsv1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoCredentialsv1(friendlyName string, required bool, secretName string, sensitive bool) *ArduinoCredentialsv1 {
	this := ArduinoCredentialsv1{}
	this.FriendlyName = friendlyName
	this.Required = required
	this.SecretName = secretName
	this.Sensitive = sensitive
	return &this
}

// NewArduinoCredentialsv1WithDefaults instantiates a new ArduinoCredentialsv1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoCredentialsv1WithDefaults() *ArduinoCredentialsv1 {
	this := ArduinoCredentialsv1{}
	return &this
}

// GetFriendlyName returns the FriendlyName field value
func (o *ArduinoCredentialsv1) GetFriendlyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value
// and a boolean to check if the value has been set.
func (o *ArduinoCredentialsv1) GetFriendlyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FriendlyName, true
}

// SetFriendlyName sets field value
func (o *ArduinoCredentialsv1) SetFriendlyName(v string) {
	o.FriendlyName = v
}

// GetRequired returns the Required field value
func (o *ArduinoCredentialsv1) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ArduinoCredentialsv1) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ArduinoCredentialsv1) SetRequired(v bool) {
	o.Required = v
}

// GetSecretName returns the SecretName field value
func (o *ArduinoCredentialsv1) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *ArduinoCredentialsv1) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *ArduinoCredentialsv1) SetSecretName(v string) {
	o.SecretName = v
}

// GetSensitive returns the Sensitive field value
func (o *ArduinoCredentialsv1) GetSensitive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *ArduinoCredentialsv1) GetSensitiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sensitive, true
}

// SetSensitive sets field value
func (o *ArduinoCredentialsv1) SetSensitive(v bool) {
	o.Sensitive = v
}

func (o ArduinoCredentialsv1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoCredentialsv1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["friendly_name"] = o.FriendlyName
	toSerialize["required"] = o.Required
	toSerialize["secret_name"] = o.SecretName
	toSerialize["sensitive"] = o.Sensitive
	return toSerialize, nil
}

func (o *ArduinoCredentialsv1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"friendly_name",
		"required",
		"secret_name",
		"sensitive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoCredentialsv1 := _ArduinoCredentialsv1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoCredentialsv1)

	if err != nil {
		return err
	}

	*o = ArduinoCredentialsv1(varArduinoCredentialsv1)

	return err
}

type NullableArduinoCredentialsv1 struct {
	value *ArduinoCredentialsv1
	isSet bool
}

func (v NullableArduinoCredentialsv1) Get() *ArduinoCredentialsv1 {
	return v.value
}

func (v *NullableArduinoCredentialsv1) Set(val *ArduinoCredentialsv1) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoCredentialsv1) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoCredentialsv1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoCredentialsv1(val *ArduinoCredentialsv1) *NullableArduinoCredentialsv1 {
	return &NullableArduinoCredentialsv1{value: val, isSet: true}
}

func (v NullableArduinoCredentialsv1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoCredentialsv1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


