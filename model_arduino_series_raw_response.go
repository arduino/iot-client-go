/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// checks if the ArduinoSeriesRawResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoSeriesRawResponse{}

// ArduinoSeriesRawResponse ArduinoSeriesRawResponse media type (default view)
type ArduinoSeriesRawResponse struct {
	// Total number of values in the array 'values'
	CountValues int64 `json:"count_values"`
	// From date
	FromDate time.Time `json:"from_date"`
	// If the response is different than 'ok'
	Message *string `json:"message,omitempty"`
	// Property id
	PropertyId *string `json:"property_id,omitempty"`
	// Property name
	PropertyName *string `json:"property_name,omitempty"`
	// Property type
	PropertyType *string `json:"property_type,omitempty"`
	// Query of for the data
	Query string `json:"query"`
	// Response version
	RespVersion int64 `json:"resp_version"`
	Series BatchQueryRawResponseSeriesMediaV1 `json:"series"`
	// Max of values
	SeriesLimit *int64 `json:"series_limit,omitempty"`
	// Sorting
	Sort string `json:"sort"`
	// Status of the response
	Status string `json:"status"`
	// Thing id
	ThingId *string `json:"thing_id,omitempty"`
	// Timestamp in RFC3339
	Times []time.Time `json:"times"`
	// To date
	ToDate time.Time `json:"to_date"`
	// Values can be in Float, String, Bool, Object
	Values []interface{} `json:"values"`
}

// NewArduinoSeriesRawResponse instantiates a new ArduinoSeriesRawResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoSeriesRawResponse(countValues int64, fromDate time.Time, query string, respVersion int64, series BatchQueryRawResponseSeriesMediaV1, sort string, status string, times []time.Time, toDate time.Time, values []interface{}) *ArduinoSeriesRawResponse {
	this := ArduinoSeriesRawResponse{}
	this.CountValues = countValues
	this.FromDate = fromDate
	var message string = ""
	this.Message = &message
	this.Query = query
	this.RespVersion = respVersion
	this.Series = series
	this.Sort = sort
	this.Status = status
	this.Times = times
	this.ToDate = toDate
	this.Values = values
	return &this
}

// NewArduinoSeriesRawResponseWithDefaults instantiates a new ArduinoSeriesRawResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoSeriesRawResponseWithDefaults() *ArduinoSeriesRawResponse {
	this := ArduinoSeriesRawResponse{}
	var message string = ""
	this.Message = &message
	return &this
}

// GetCountValues returns the CountValues field value
func (o *ArduinoSeriesRawResponse) GetCountValues() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CountValues
}

// GetCountValuesOk returns a tuple with the CountValues field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetCountValuesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountValues, true
}

// SetCountValues sets field value
func (o *ArduinoSeriesRawResponse) SetCountValues(v int64) {
	o.CountValues = v
}

// GetFromDate returns the FromDate field value
func (o *ArduinoSeriesRawResponse) GetFromDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.FromDate
}

// GetFromDateOk returns a tuple with the FromDate field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetFromDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromDate, true
}

// SetFromDate sets field value
func (o *ArduinoSeriesRawResponse) SetFromDate(v time.Time) {
	o.FromDate = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ArduinoSeriesRawResponse) SetMessage(v string) {
	o.Message = &v
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetPropertyId() string {
	if o == nil || IsNil(o.PropertyId) {
		var ret string
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyId) {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasPropertyId() bool {
	if o != nil && !IsNil(o.PropertyId) {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given string and assigns it to the PropertyId field.
func (o *ArduinoSeriesRawResponse) SetPropertyId(v string) {
	o.PropertyId = &v
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName) {
		var ret string
		return ret
	}
	return *o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetPropertyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyName) {
		return nil, false
	}
	return o.PropertyName, true
}

// HasPropertyName returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasPropertyName() bool {
	if o != nil && !IsNil(o.PropertyName) {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given string and assigns it to the PropertyName field.
func (o *ArduinoSeriesRawResponse) SetPropertyName(v string) {
	o.PropertyName = &v
}

// GetPropertyType returns the PropertyType field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetPropertyType() string {
	if o == nil || IsNil(o.PropertyType) {
		var ret string
		return ret
	}
	return *o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetPropertyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyType) {
		return nil, false
	}
	return o.PropertyType, true
}

// HasPropertyType returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasPropertyType() bool {
	if o != nil && !IsNil(o.PropertyType) {
		return true
	}

	return false
}

// SetPropertyType gets a reference to the given string and assigns it to the PropertyType field.
func (o *ArduinoSeriesRawResponse) SetPropertyType(v string) {
	o.PropertyType = &v
}

// GetQuery returns the Query field value
func (o *ArduinoSeriesRawResponse) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *ArduinoSeriesRawResponse) SetQuery(v string) {
	o.Query = v
}

// GetRespVersion returns the RespVersion field value
func (o *ArduinoSeriesRawResponse) GetRespVersion() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RespVersion
}

// GetRespVersionOk returns a tuple with the RespVersion field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetRespVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RespVersion, true
}

// SetRespVersion sets field value
func (o *ArduinoSeriesRawResponse) SetRespVersion(v int64) {
	o.RespVersion = v
}

// GetSeries returns the Series field value
func (o *ArduinoSeriesRawResponse) GetSeries() BatchQueryRawResponseSeriesMediaV1 {
	if o == nil {
		var ret BatchQueryRawResponseSeriesMediaV1
		return ret
	}

	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetSeriesOk() (*BatchQueryRawResponseSeriesMediaV1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Series, true
}

// SetSeries sets field value
func (o *ArduinoSeriesRawResponse) SetSeries(v BatchQueryRawResponseSeriesMediaV1) {
	o.Series = v
}

// GetSeriesLimit returns the SeriesLimit field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetSeriesLimit() int64 {
	if o == nil || IsNil(o.SeriesLimit) {
		var ret int64
		return ret
	}
	return *o.SeriesLimit
}

// GetSeriesLimitOk returns a tuple with the SeriesLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetSeriesLimitOk() (*int64, bool) {
	if o == nil || IsNil(o.SeriesLimit) {
		return nil, false
	}
	return o.SeriesLimit, true
}

// HasSeriesLimit returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasSeriesLimit() bool {
	if o != nil && !IsNil(o.SeriesLimit) {
		return true
	}

	return false
}

// SetSeriesLimit gets a reference to the given int64 and assigns it to the SeriesLimit field.
func (o *ArduinoSeriesRawResponse) SetSeriesLimit(v int64) {
	o.SeriesLimit = &v
}

// GetSort returns the Sort field value
func (o *ArduinoSeriesRawResponse) GetSort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetSortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sort, true
}

// SetSort sets field value
func (o *ArduinoSeriesRawResponse) SetSort(v string) {
	o.Sort = v
}

// GetStatus returns the Status field value
func (o *ArduinoSeriesRawResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ArduinoSeriesRawResponse) SetStatus(v string) {
	o.Status = v
}

// GetThingId returns the ThingId field value if set, zero value otherwise.
func (o *ArduinoSeriesRawResponse) GetThingId() string {
	if o == nil || IsNil(o.ThingId) {
		var ret string
		return ret
	}
	return *o.ThingId
}

// GetThingIdOk returns a tuple with the ThingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetThingIdOk() (*string, bool) {
	if o == nil || IsNil(o.ThingId) {
		return nil, false
	}
	return o.ThingId, true
}

// HasThingId returns a boolean if a field has been set.
func (o *ArduinoSeriesRawResponse) HasThingId() bool {
	if o != nil && !IsNil(o.ThingId) {
		return true
	}

	return false
}

// SetThingId gets a reference to the given string and assigns it to the ThingId field.
func (o *ArduinoSeriesRawResponse) SetThingId(v string) {
	o.ThingId = &v
}

// GetTimes returns the Times field value
func (o *ArduinoSeriesRawResponse) GetTimes() []time.Time {
	if o == nil {
		var ret []time.Time
		return ret
	}

	return o.Times
}

// GetTimesOk returns a tuple with the Times field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetTimesOk() ([]time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Times, true
}

// SetTimes sets field value
func (o *ArduinoSeriesRawResponse) SetTimes(v []time.Time) {
	o.Times = v
}

// GetToDate returns the ToDate field value
func (o *ArduinoSeriesRawResponse) GetToDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ToDate
}

// GetToDateOk returns a tuple with the ToDate field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetToDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToDate, true
}

// SetToDate sets field value
func (o *ArduinoSeriesRawResponse) SetToDate(v time.Time) {
	o.ToDate = v
}

// GetValues returns the Values field value
func (o *ArduinoSeriesRawResponse) GetValues() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *ArduinoSeriesRawResponse) GetValuesOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *ArduinoSeriesRawResponse) SetValues(v []interface{}) {
	o.Values = v
}

func (o ArduinoSeriesRawResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoSeriesRawResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count_values"] = o.CountValues
	toSerialize["from_date"] = o.FromDate
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.PropertyId) {
		toSerialize["property_id"] = o.PropertyId
	}
	if !IsNil(o.PropertyName) {
		toSerialize["property_name"] = o.PropertyName
	}
	if !IsNil(o.PropertyType) {
		toSerialize["property_type"] = o.PropertyType
	}
	toSerialize["query"] = o.Query
	toSerialize["resp_version"] = o.RespVersion
	toSerialize["series"] = o.Series
	if !IsNil(o.SeriesLimit) {
		toSerialize["series_limit"] = o.SeriesLimit
	}
	toSerialize["sort"] = o.Sort
	toSerialize["status"] = o.Status
	if !IsNil(o.ThingId) {
		toSerialize["thing_id"] = o.ThingId
	}
	toSerialize["times"] = o.Times
	toSerialize["to_date"] = o.ToDate
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

type NullableArduinoSeriesRawResponse struct {
	value *ArduinoSeriesRawResponse
	isSet bool
}

func (v NullableArduinoSeriesRawResponse) Get() *ArduinoSeriesRawResponse {
	return v.value
}

func (v *NullableArduinoSeriesRawResponse) Set(val *ArduinoSeriesRawResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoSeriesRawResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoSeriesRawResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoSeriesRawResponse(val *ArduinoSeriesRawResponse) *NullableArduinoSeriesRawResponse {
	return &NullableArduinoSeriesRawResponse{value: val, isSet: true}
}

func (v NullableArduinoSeriesRawResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoSeriesRawResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


