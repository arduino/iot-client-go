/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TitleExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TitleExpression{}

// TitleExpression struct for TitleExpression
type TitleExpression struct {
	// Content of the title (or subject) of a message, variables are allowed
	Expression string `json:"expression"`
	// Variables used by the expression
	Variables []Variable `json:"variables,omitempty"`
}

type _TitleExpression TitleExpression

// NewTitleExpression instantiates a new TitleExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTitleExpression(expression string) *TitleExpression {
	this := TitleExpression{}
	this.Expression = expression
	return &this
}

// NewTitleExpressionWithDefaults instantiates a new TitleExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTitleExpressionWithDefaults() *TitleExpression {
	this := TitleExpression{}
	return &this
}

// GetExpression returns the Expression field value
func (o *TitleExpression) GetExpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value
// and a boolean to check if the value has been set.
func (o *TitleExpression) GetExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expression, true
}

// SetExpression sets field value
func (o *TitleExpression) SetExpression(v string) {
	o.Expression = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *TitleExpression) GetVariables() []Variable {
	if o == nil || IsNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TitleExpression) GetVariablesOk() ([]Variable, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *TitleExpression) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *TitleExpression) SetVariables(v []Variable) {
	o.Variables = v
}

func (o TitleExpression) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TitleExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expression"] = o.Expression
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

func (o *TitleExpression) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTitleExpression := _TitleExpression{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTitleExpression)

	if err != nil {
		return err
	}

	*o = TitleExpression(varTitleExpression)

	return err
}

type NullableTitleExpression struct {
	value *TitleExpression
	isSet bool
}

func (v NullableTitleExpression) Get() *TitleExpression {
	return v.value
}

func (v *NullableTitleExpression) Set(val *TitleExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableTitleExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableTitleExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTitleExpression(val *TitleExpression) *NullableTitleExpression {
	return &NullableTitleExpression{value: val, isSet: true}
}

func (v NullableTitleExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTitleExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


