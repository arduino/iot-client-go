/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the ArduinoDevicev2EventProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoDevicev2EventProperties{}

// ArduinoDevicev2EventProperties ArduinoDevicev2EventProperties media type (default view)
type ArduinoDevicev2EventProperties struct {
	// ArduinoDevicev2SimplePropertiesCollection is the media type for an array of ArduinoDevicev2SimpleProperties (default view)
	Events []ArduinoDevicev2SimpleProperties `json:"events"`
	// The device of the property
	Id string `json:"id"`
	AdditionalProperties map[string]interface{}
}

type _ArduinoDevicev2EventProperties ArduinoDevicev2EventProperties

// NewArduinoDevicev2EventProperties instantiates a new ArduinoDevicev2EventProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoDevicev2EventProperties(events []ArduinoDevicev2SimpleProperties, id string) *ArduinoDevicev2EventProperties {
	this := ArduinoDevicev2EventProperties{}
	this.Events = events
	this.Id = id
	return &this
}

// NewArduinoDevicev2EventPropertiesWithDefaults instantiates a new ArduinoDevicev2EventProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoDevicev2EventPropertiesWithDefaults() *ArduinoDevicev2EventProperties {
	this := ArduinoDevicev2EventProperties{}
	return &this
}

// GetEvents returns the Events field value
func (o *ArduinoDevicev2EventProperties) GetEvents() []ArduinoDevicev2SimpleProperties {
	if o == nil {
		var ret []ArduinoDevicev2SimpleProperties
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2EventProperties) GetEventsOk() ([]ArduinoDevicev2SimpleProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *ArduinoDevicev2EventProperties) SetEvents(v []ArduinoDevicev2SimpleProperties) {
	o.Events = v
}

// GetId returns the Id field value
func (o *ArduinoDevicev2EventProperties) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2EventProperties) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArduinoDevicev2EventProperties) SetId(v string) {
	o.Id = v
}

func (o ArduinoDevicev2EventProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoDevicev2EventProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["id"] = o.Id

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArduinoDevicev2EventProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoDevicev2EventProperties := _ArduinoDevicev2EventProperties{}

	err = json.Unmarshal(data, &varArduinoDevicev2EventProperties)

	if err != nil {
		return err
	}

	*o = ArduinoDevicev2EventProperties(varArduinoDevicev2EventProperties)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArduinoDevicev2EventProperties struct {
	value *ArduinoDevicev2EventProperties
	isSet bool
}

func (v NullableArduinoDevicev2EventProperties) Get() *ArduinoDevicev2EventProperties {
	return v.value
}

func (v *NullableArduinoDevicev2EventProperties) Set(val *ArduinoDevicev2EventProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoDevicev2EventProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoDevicev2EventProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoDevicev2EventProperties(val *ArduinoDevicev2EventProperties) *NullableArduinoDevicev2EventProperties {
	return &NullableArduinoDevicev2EventProperties{value: val, isSet: true}
}

func (v NullableArduinoDevicev2EventProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoDevicev2EventProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


