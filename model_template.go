/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the Template type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Template{}

// Template TemplatePayload describes the needed attribute to apply a template
type Template struct {
	// The name of the directory on S3 bucket containing the user's template
	CustomTemplateId *string `json:"custom_template_id,omitempty"`
	// The prefix to apply to the names of the generated resources
	PrefixName *string `json:"prefix_name,omitempty" validate:"regexp=^[a-zA-Z0-9_. -]+$"`
	// The name of the directory on S3 bucket containing the template
	TemplateName string `json:"template_name"`
	ThingsOptions map[string]interface{} `json:"things_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Template Template

// NewTemplate instantiates a new Template object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplate(templateName string) *Template {
	this := Template{}
	this.TemplateName = templateName
	return &this
}

// NewTemplateWithDefaults instantiates a new Template object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateWithDefaults() *Template {
	this := Template{}
	return &this
}

// GetCustomTemplateId returns the CustomTemplateId field value if set, zero value otherwise.
func (o *Template) GetCustomTemplateId() string {
	if o == nil || IsNil(o.CustomTemplateId) {
		var ret string
		return ret
	}
	return *o.CustomTemplateId
}

// GetCustomTemplateIdOk returns a tuple with the CustomTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Template) GetCustomTemplateIdOk() (*string, bool) {
	if o == nil || IsNil(o.CustomTemplateId) {
		return nil, false
	}
	return o.CustomTemplateId, true
}

// HasCustomTemplateId returns a boolean if a field has been set.
func (o *Template) HasCustomTemplateId() bool {
	if o != nil && !IsNil(o.CustomTemplateId) {
		return true
	}

	return false
}

// SetCustomTemplateId gets a reference to the given string and assigns it to the CustomTemplateId field.
func (o *Template) SetCustomTemplateId(v string) {
	o.CustomTemplateId = &v
}

// GetPrefixName returns the PrefixName field value if set, zero value otherwise.
func (o *Template) GetPrefixName() string {
	if o == nil || IsNil(o.PrefixName) {
		var ret string
		return ret
	}
	return *o.PrefixName
}

// GetPrefixNameOk returns a tuple with the PrefixName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Template) GetPrefixNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrefixName) {
		return nil, false
	}
	return o.PrefixName, true
}

// HasPrefixName returns a boolean if a field has been set.
func (o *Template) HasPrefixName() bool {
	if o != nil && !IsNil(o.PrefixName) {
		return true
	}

	return false
}

// SetPrefixName gets a reference to the given string and assigns it to the PrefixName field.
func (o *Template) SetPrefixName(v string) {
	o.PrefixName = &v
}

// GetTemplateName returns the TemplateName field value
func (o *Template) GetTemplateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value
// and a boolean to check if the value has been set.
func (o *Template) GetTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateName, true
}

// SetTemplateName sets field value
func (o *Template) SetTemplateName(v string) {
	o.TemplateName = v
}

// GetThingsOptions returns the ThingsOptions field value if set, zero value otherwise.
func (o *Template) GetThingsOptions() map[string]interface{} {
	if o == nil || IsNil(o.ThingsOptions) {
		var ret map[string]interface{}
		return ret
	}
	return o.ThingsOptions
}

// GetThingsOptionsOk returns a tuple with the ThingsOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Template) GetThingsOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ThingsOptions) {
		return map[string]interface{}{}, false
	}
	return o.ThingsOptions, true
}

// HasThingsOptions returns a boolean if a field has been set.
func (o *Template) HasThingsOptions() bool {
	if o != nil && !IsNil(o.ThingsOptions) {
		return true
	}

	return false
}

// SetThingsOptions gets a reference to the given map[string]interface{} and assigns it to the ThingsOptions field.
func (o *Template) SetThingsOptions(v map[string]interface{}) {
	o.ThingsOptions = v
}

func (o Template) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Template) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CustomTemplateId) {
		toSerialize["custom_template_id"] = o.CustomTemplateId
	}
	if !IsNil(o.PrefixName) {
		toSerialize["prefix_name"] = o.PrefixName
	}
	toSerialize["template_name"] = o.TemplateName
	if !IsNil(o.ThingsOptions) {
		toSerialize["things_options"] = o.ThingsOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Template) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"template_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplate := _Template{}

	err = json.Unmarshal(data, &varTemplate)

	if err != nil {
		return err
	}

	*o = Template(varTemplate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "custom_template_id")
		delete(additionalProperties, "prefix_name")
		delete(additionalProperties, "template_name")
		delete(additionalProperties, "things_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTemplate struct {
	value *Template
	isSet bool
}

func (v NullableTemplate) Get() *Template {
	return v.value
}

func (v *NullableTemplate) Set(val *Template) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplate(val *Template) *NullableTemplate {
	return &NullableTemplate{value: val, isSet: true}
}

func (v NullableTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


