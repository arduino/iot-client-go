/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ArduinoCompressedv2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoCompressedv2{}

// ArduinoCompressedv2 compressed contains the info from which to generate the certificate (default view)
type ArduinoCompressedv2 struct {
	// The Authority Key Identifier of the certificate
	AuthorityKeyIdentifier *string `json:"authority_key_identifier,omitempty"`
	// The ending date of the certificate
	NotAfter time.Time `json:"not_after"`
	// The starting date of the certificate
	NotBefore time.Time `json:"not_before"`
	// The serial number of the certificate
	Serial string `json:"serial"`
	// The signature of the certificate
	Signature string `json:"signature"`
	// The ASN1 X component of certificate signature
	SignatureAsn1X string `json:"signature_asn1_x"`
	// The ASN1 Y component of certificate signature
	SignatureAsn1Y string `json:"signature_asn1_y"`
	AdditionalProperties map[string]interface{}
}

type _ArduinoCompressedv2 ArduinoCompressedv2

// NewArduinoCompressedv2 instantiates a new ArduinoCompressedv2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoCompressedv2(notAfter time.Time, notBefore time.Time, serial string, signature string, signatureAsn1X string, signatureAsn1Y string) *ArduinoCompressedv2 {
	this := ArduinoCompressedv2{}
	this.NotAfter = notAfter
	this.NotBefore = notBefore
	this.Serial = serial
	this.Signature = signature
	this.SignatureAsn1X = signatureAsn1X
	this.SignatureAsn1Y = signatureAsn1Y
	return &this
}

// NewArduinoCompressedv2WithDefaults instantiates a new ArduinoCompressedv2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoCompressedv2WithDefaults() *ArduinoCompressedv2 {
	this := ArduinoCompressedv2{}
	return &this
}

// GetAuthorityKeyIdentifier returns the AuthorityKeyIdentifier field value if set, zero value otherwise.
func (o *ArduinoCompressedv2) GetAuthorityKeyIdentifier() string {
	if o == nil || IsNil(o.AuthorityKeyIdentifier) {
		var ret string
		return ret
	}
	return *o.AuthorityKeyIdentifier
}

// GetAuthorityKeyIdentifierOk returns a tuple with the AuthorityKeyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetAuthorityKeyIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorityKeyIdentifier) {
		return nil, false
	}
	return o.AuthorityKeyIdentifier, true
}

// HasAuthorityKeyIdentifier returns a boolean if a field has been set.
func (o *ArduinoCompressedv2) HasAuthorityKeyIdentifier() bool {
	if o != nil && !IsNil(o.AuthorityKeyIdentifier) {
		return true
	}

	return false
}

// SetAuthorityKeyIdentifier gets a reference to the given string and assigns it to the AuthorityKeyIdentifier field.
func (o *ArduinoCompressedv2) SetAuthorityKeyIdentifier(v string) {
	o.AuthorityKeyIdentifier = &v
}

// GetNotAfter returns the NotAfter field value
func (o *ArduinoCompressedv2) GetNotAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetNotAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotAfter, true
}

// SetNotAfter sets field value
func (o *ArduinoCompressedv2) SetNotAfter(v time.Time) {
	o.NotAfter = v
}

// GetNotBefore returns the NotBefore field value
func (o *ArduinoCompressedv2) GetNotBefore() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotBefore, true
}

// SetNotBefore sets field value
func (o *ArduinoCompressedv2) SetNotBefore(v time.Time) {
	o.NotBefore = v
}

// GetSerial returns the Serial field value
func (o *ArduinoCompressedv2) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *ArduinoCompressedv2) SetSerial(v string) {
	o.Serial = v
}

// GetSignature returns the Signature field value
func (o *ArduinoCompressedv2) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *ArduinoCompressedv2) SetSignature(v string) {
	o.Signature = v
}

// GetSignatureAsn1X returns the SignatureAsn1X field value
func (o *ArduinoCompressedv2) GetSignatureAsn1X() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAsn1X
}

// GetSignatureAsn1XOk returns a tuple with the SignatureAsn1X field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetSignatureAsn1XOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAsn1X, true
}

// SetSignatureAsn1X sets field value
func (o *ArduinoCompressedv2) SetSignatureAsn1X(v string) {
	o.SignatureAsn1X = v
}

// GetSignatureAsn1Y returns the SignatureAsn1Y field value
func (o *ArduinoCompressedv2) GetSignatureAsn1Y() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignatureAsn1Y
}

// GetSignatureAsn1YOk returns a tuple with the SignatureAsn1Y field value
// and a boolean to check if the value has been set.
func (o *ArduinoCompressedv2) GetSignatureAsn1YOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAsn1Y, true
}

// SetSignatureAsn1Y sets field value
func (o *ArduinoCompressedv2) SetSignatureAsn1Y(v string) {
	o.SignatureAsn1Y = v
}

func (o ArduinoCompressedv2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoCompressedv2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorityKeyIdentifier) {
		toSerialize["authority_key_identifier"] = o.AuthorityKeyIdentifier
	}
	toSerialize["not_after"] = o.NotAfter
	toSerialize["not_before"] = o.NotBefore
	toSerialize["serial"] = o.Serial
	toSerialize["signature"] = o.Signature
	toSerialize["signature_asn1_x"] = o.SignatureAsn1X
	toSerialize["signature_asn1_y"] = o.SignatureAsn1Y

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArduinoCompressedv2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"not_after",
		"not_before",
		"serial",
		"signature",
		"signature_asn1_x",
		"signature_asn1_y",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoCompressedv2 := _ArduinoCompressedv2{}

	err = json.Unmarshal(data, &varArduinoCompressedv2)

	if err != nil {
		return err
	}

	*o = ArduinoCompressedv2(varArduinoCompressedv2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authority_key_identifier")
		delete(additionalProperties, "not_after")
		delete(additionalProperties, "not_before")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "signature")
		delete(additionalProperties, "signature_asn1_x")
		delete(additionalProperties, "signature_asn1_y")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArduinoCompressedv2 struct {
	value *ArduinoCompressedv2
	isSet bool
}

func (v NullableArduinoCompressedv2) Get() *ArduinoCompressedv2 {
	return v.value
}

func (v *NullableArduinoCompressedv2) Set(val *ArduinoCompressedv2) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoCompressedv2) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoCompressedv2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoCompressedv2(val *ArduinoCompressedv2) *NullableArduinoCompressedv2 {
	return &NullableArduinoCompressedv2{value: val, isSet: true}
}

func (v NullableArduinoCompressedv2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoCompressedv2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


