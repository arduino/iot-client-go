/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArduinoDevicev2Cert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoDevicev2Cert{}

// ArduinoDevicev2Cert DeviceCertV2 describes a certificate associated to the device (default view)
type ArduinoDevicev2Cert struct {
	// The Certification Authority used to sign the certificate
	Ca *string `json:"ca,omitempty"`
	Compressed ArduinoCompressedv2 `json:"compressed"`
	// The certificate in DER format
	Der string `json:"der"`
	// The unique identifier of the device
	DeviceId string `json:"device_id"`
	// Whether the certificate is enabled
	Enabled bool `json:"enabled"`
	// The api reference of this cert
	Href string `json:"href"`
	// The unique identifier of the key
	Id string `json:"id"`
	// The certificate in pem format
	Pem string `json:"pem"`
}

type _ArduinoDevicev2Cert ArduinoDevicev2Cert

// NewArduinoDevicev2Cert instantiates a new ArduinoDevicev2Cert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoDevicev2Cert(compressed ArduinoCompressedv2, der string, deviceId string, enabled bool, href string, id string, pem string) *ArduinoDevicev2Cert {
	this := ArduinoDevicev2Cert{}
	this.Compressed = compressed
	this.Der = der
	this.DeviceId = deviceId
	this.Enabled = enabled
	this.Href = href
	this.Id = id
	this.Pem = pem
	return &this
}

// NewArduinoDevicev2CertWithDefaults instantiates a new ArduinoDevicev2Cert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoDevicev2CertWithDefaults() *ArduinoDevicev2Cert {
	this := ArduinoDevicev2Cert{}
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetCa returns the Ca field value if set, zero value otherwise.
func (o *ArduinoDevicev2Cert) GetCa() string {
	if o == nil || IsNil(o.Ca) {
		var ret string
		return ret
	}
	return *o.Ca
}

// GetCaOk returns a tuple with the Ca field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetCaOk() (*string, bool) {
	if o == nil || IsNil(o.Ca) {
		return nil, false
	}
	return o.Ca, true
}

// HasCa returns a boolean if a field has been set.
func (o *ArduinoDevicev2Cert) HasCa() bool {
	if o != nil && !IsNil(o.Ca) {
		return true
	}

	return false
}

// SetCa gets a reference to the given string and assigns it to the Ca field.
func (o *ArduinoDevicev2Cert) SetCa(v string) {
	o.Ca = &v
}

// GetCompressed returns the Compressed field value
func (o *ArduinoDevicev2Cert) GetCompressed() ArduinoCompressedv2 {
	if o == nil {
		var ret ArduinoCompressedv2
		return ret
	}

	return o.Compressed
}

// GetCompressedOk returns a tuple with the Compressed field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetCompressedOk() (*ArduinoCompressedv2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compressed, true
}

// SetCompressed sets field value
func (o *ArduinoDevicev2Cert) SetCompressed(v ArduinoCompressedv2) {
	o.Compressed = v
}

// GetDer returns the Der field value
func (o *ArduinoDevicev2Cert) GetDer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Der
}

// GetDerOk returns a tuple with the Der field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetDerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Der, true
}

// SetDer sets field value
func (o *ArduinoDevicev2Cert) SetDer(v string) {
	o.Der = v
}

// GetDeviceId returns the DeviceId field value
func (o *ArduinoDevicev2Cert) GetDeviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetDeviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *ArduinoDevicev2Cert) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetEnabled returns the Enabled field value
func (o *ArduinoDevicev2Cert) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ArduinoDevicev2Cert) SetEnabled(v bool) {
	o.Enabled = v
}

// GetHref returns the Href field value
func (o *ArduinoDevicev2Cert) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *ArduinoDevicev2Cert) SetHref(v string) {
	o.Href = v
}

// GetId returns the Id field value
func (o *ArduinoDevicev2Cert) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArduinoDevicev2Cert) SetId(v string) {
	o.Id = v
}

// GetPem returns the Pem field value
func (o *ArduinoDevicev2Cert) GetPem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pem
}

// GetPemOk returns a tuple with the Pem field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Cert) GetPemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pem, true
}

// SetPem sets field value
func (o *ArduinoDevicev2Cert) SetPem(v string) {
	o.Pem = v
}

func (o ArduinoDevicev2Cert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoDevicev2Cert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ca) {
		toSerialize["ca"] = o.Ca
	}
	toSerialize["compressed"] = o.Compressed
	toSerialize["der"] = o.Der
	toSerialize["device_id"] = o.DeviceId
	toSerialize["enabled"] = o.Enabled
	toSerialize["href"] = o.Href
	toSerialize["id"] = o.Id
	toSerialize["pem"] = o.Pem
	return toSerialize, nil
}

func (o *ArduinoDevicev2Cert) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"compressed",
		"der",
		"device_id",
		"enabled",
		"href",
		"id",
		"pem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoDevicev2Cert := _ArduinoDevicev2Cert{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoDevicev2Cert)

	if err != nil {
		return err
	}

	*o = ArduinoDevicev2Cert(varArduinoDevicev2Cert)

	return err
}

type NullableArduinoDevicev2Cert struct {
	value *ArduinoDevicev2Cert
	isSet bool
}

func (v NullableArduinoDevicev2Cert) Get() *ArduinoDevicev2Cert {
	return v.value
}

func (v *NullableArduinoDevicev2Cert) Set(val *ArduinoDevicev2Cert) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoDevicev2Cert) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoDevicev2Cert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoDevicev2Cert(val *ArduinoDevicev2Cert) *NullableArduinoDevicev2Cert {
	return &NullableArduinoDevicev2Cert{value: val, isSet: true}
}

func (v NullableArduinoDevicev2Cert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoDevicev2Cert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


