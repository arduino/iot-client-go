/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArduinoLinkedProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoLinkedProperty{}

// ArduinoLinkedProperty ArduinoLinked_property media type (default view)
type ArduinoLinkedProperty struct {
	Property ArduinoProperty `json:"property"`
	// The status of the linked property
	Status string `json:"status"`
}

type _ArduinoLinkedProperty ArduinoLinkedProperty

// NewArduinoLinkedProperty instantiates a new ArduinoLinkedProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoLinkedProperty(property ArduinoProperty, status string) *ArduinoLinkedProperty {
	this := ArduinoLinkedProperty{}
	this.Property = property
	this.Status = status
	return &this
}

// NewArduinoLinkedPropertyWithDefaults instantiates a new ArduinoLinkedProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoLinkedPropertyWithDefaults() *ArduinoLinkedProperty {
	this := ArduinoLinkedProperty{}
	return &this
}

// GetProperty returns the Property field value
func (o *ArduinoLinkedProperty) GetProperty() ArduinoProperty {
	if o == nil {
		var ret ArduinoProperty
		return ret
	}

	return o.Property
}

// GetPropertyOk returns a tuple with the Property field value
// and a boolean to check if the value has been set.
func (o *ArduinoLinkedProperty) GetPropertyOk() (*ArduinoProperty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Property, true
}

// SetProperty sets field value
func (o *ArduinoLinkedProperty) SetProperty(v ArduinoProperty) {
	o.Property = v
}

// GetStatus returns the Status field value
func (o *ArduinoLinkedProperty) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ArduinoLinkedProperty) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ArduinoLinkedProperty) SetStatus(v string) {
	o.Status = v
}

func (o ArduinoLinkedProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoLinkedProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["property"] = o.Property
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ArduinoLinkedProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"property",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoLinkedProperty := _ArduinoLinkedProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoLinkedProperty)

	if err != nil {
		return err
	}

	*o = ArduinoLinkedProperty(varArduinoLinkedProperty)

	return err
}

type NullableArduinoLinkedProperty struct {
	value *ArduinoLinkedProperty
	isSet bool
}

func (v NullableArduinoLinkedProperty) Get() *ArduinoLinkedProperty {
	return v.value
}

func (v *NullableArduinoLinkedProperty) Set(val *ArduinoLinkedProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoLinkedProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoLinkedProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoLinkedProperty(val *ArduinoLinkedProperty) *NullableArduinoLinkedProperty {
	return &NullableArduinoLinkedProperty{value: val, isSet: true}
}

func (v NullableArduinoLinkedProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoLinkedProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


