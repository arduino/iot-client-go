/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ArduinoDevicev2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoDevicev2{}

// ArduinoDevicev2 ArduinoDevicev2 media type (default view)
type ArduinoDevicev2 struct {
	BleMac *string `json:"ble_mac,omitempty" validate:"regexp=^(?:[0-9A-Fa-f]{2}[:]){5}(?:[0-9A-Fa-f]{2})"`
	// The type of the connections selected by the user when multiple connections are available
	ConnectionType *string `json:"connection_type,omitempty"`
	// Creation date of the device
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Deletion date of the trigger
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// The connection status of the device
	DeviceStatus *string `json:"device_status,omitempty"`
	// ArduinoDevicev2SimplePropertiesCollection is the media type for an array of ArduinoDevicev2SimpleProperties (default view)
	Events []ArduinoDevicev2SimpleProperties `json:"events,omitempty"`
	// The fully qualified board name
	Fqbn *string `json:"fqbn,omitempty"`
	// The api reference of this device
	Href string `json:"href"`
	// The arn of the device
	Id string `json:"id"`
	IssuerCa *string `json:"issuer_ca,omitempty"`
	// The label of the device
	Label string `json:"label"`
	// Last activity date
	LastActivityAt *time.Time `json:"last_activity_at,omitempty"`
	// The latest version of the NINA/WIFI101 firmware available for this device
	LatestWifiFwVersion *string `json:"latest_wifi_fw_version,omitempty"`
	LibVersion *string `json:"lib_version,omitempty"`
	// The metadata of the device
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// The friendly name of the device
	Name string `json:"name"`
	// True if the device type can not have an associated sketch
	NoSketch *bool `json:"no_sketch,omitempty"`
	// Id of the organization the device belongs to
	OrganizationId *string `json:"organization_id,omitempty"`
	// True if the device type is ready to receive OTA updated
	OtaAvailable *bool `json:"ota_available,omitempty"`
	// True if the device type is OTA compatible
	OtaCompatible *bool `json:"ota_compatible,omitempty"`
	// The required version of the NINA/WIFI101 firmware needed by IoT Cloud
	RequiredWifiFwVersion *string `json:"required_wifi_fw_version,omitempty"`
	// The serial uuid of the device
	Serial string `json:"serial"`
	// Tags belonging to the device
	Tags map[string]interface{} `json:"tags,omitempty"`
	Thing *ArduinoThing `json:"thing,omitempty"`
	// The type of the device
	Type string `json:"type"`
	// The unique hardware id of the device
	UniqueHardwareId *string `json:"unique_hardware_id,omitempty"`
	// Update date of the trigger
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The id of the user
	UserId string `json:"user_id"`
	// ArduinoDevicev2WebhookCollection is the media type for an array of ArduinoDevicev2Webhook (default view)
	Webhooks []ArduinoDevicev2Webhook `json:"webhooks,omitempty"`
	// The version of the NINA/WIFI101 firmware running on the device
	WifiFwVersion *string `json:"wifi_fw_version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ArduinoDevicev2 ArduinoDevicev2

// NewArduinoDevicev2 instantiates a new ArduinoDevicev2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoDevicev2(href string, id string, label string, name string, serial string, type_ string, userId string) *ArduinoDevicev2 {
	this := ArduinoDevicev2{}
	this.Href = href
	this.Id = id
	this.Label = label
	this.Name = name
	this.Serial = serial
	this.Type = type_
	this.UserId = userId
	return &this
}

// NewArduinoDevicev2WithDefaults instantiates a new ArduinoDevicev2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoDevicev2WithDefaults() *ArduinoDevicev2 {
	this := ArduinoDevicev2{}
	return &this
}

// GetBleMac returns the BleMac field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetBleMac() string {
	if o == nil || IsNil(o.BleMac) {
		var ret string
		return ret
	}
	return *o.BleMac
}

// GetBleMacOk returns a tuple with the BleMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetBleMacOk() (*string, bool) {
	if o == nil || IsNil(o.BleMac) {
		return nil, false
	}
	return o.BleMac, true
}

// HasBleMac returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasBleMac() bool {
	if o != nil && !IsNil(o.BleMac) {
		return true
	}

	return false
}

// SetBleMac gets a reference to the given string and assigns it to the BleMac field.
func (o *ArduinoDevicev2) SetBleMac(v string) {
	o.BleMac = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *ArduinoDevicev2) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ArduinoDevicev2) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *ArduinoDevicev2) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetDeviceStatus returns the DeviceStatus field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetDeviceStatus() string {
	if o == nil || IsNil(o.DeviceStatus) {
		var ret string
		return ret
	}
	return *o.DeviceStatus
}

// GetDeviceStatusOk returns a tuple with the DeviceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetDeviceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceStatus) {
		return nil, false
	}
	return o.DeviceStatus, true
}

// HasDeviceStatus returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasDeviceStatus() bool {
	if o != nil && !IsNil(o.DeviceStatus) {
		return true
	}

	return false
}

// SetDeviceStatus gets a reference to the given string and assigns it to the DeviceStatus field.
func (o *ArduinoDevicev2) SetDeviceStatus(v string) {
	o.DeviceStatus = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetEvents() []ArduinoDevicev2SimpleProperties {
	if o == nil || IsNil(o.Events) {
		var ret []ArduinoDevicev2SimpleProperties
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetEventsOk() ([]ArduinoDevicev2SimpleProperties, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []ArduinoDevicev2SimpleProperties and assigns it to the Events field.
func (o *ArduinoDevicev2) SetEvents(v []ArduinoDevicev2SimpleProperties) {
	o.Events = v
}

// GetFqbn returns the Fqbn field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetFqbn() string {
	if o == nil || IsNil(o.Fqbn) {
		var ret string
		return ret
	}
	return *o.Fqbn
}

// GetFqbnOk returns a tuple with the Fqbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetFqbnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqbn) {
		return nil, false
	}
	return o.Fqbn, true
}

// HasFqbn returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasFqbn() bool {
	if o != nil && !IsNil(o.Fqbn) {
		return true
	}

	return false
}

// SetFqbn gets a reference to the given string and assigns it to the Fqbn field.
func (o *ArduinoDevicev2) SetFqbn(v string) {
	o.Fqbn = &v
}

// GetHref returns the Href field value
func (o *ArduinoDevicev2) GetHref() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Href
}

// GetHrefOk returns a tuple with the Href field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetHrefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Href, true
}

// SetHref sets field value
func (o *ArduinoDevicev2) SetHref(v string) {
	o.Href = v
}

// GetId returns the Id field value
func (o *ArduinoDevicev2) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArduinoDevicev2) SetId(v string) {
	o.Id = v
}

// GetIssuerCa returns the IssuerCa field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetIssuerCa() string {
	if o == nil || IsNil(o.IssuerCa) {
		var ret string
		return ret
	}
	return *o.IssuerCa
}

// GetIssuerCaOk returns a tuple with the IssuerCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetIssuerCaOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerCa) {
		return nil, false
	}
	return o.IssuerCa, true
}

// HasIssuerCa returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasIssuerCa() bool {
	if o != nil && !IsNil(o.IssuerCa) {
		return true
	}

	return false
}

// SetIssuerCa gets a reference to the given string and assigns it to the IssuerCa field.
func (o *ArduinoDevicev2) SetIssuerCa(v string) {
	o.IssuerCa = &v
}

// GetLabel returns the Label field value
func (o *ArduinoDevicev2) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *ArduinoDevicev2) SetLabel(v string) {
	o.Label = v
}

// GetLastActivityAt returns the LastActivityAt field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetLastActivityAt() time.Time {
	if o == nil || IsNil(o.LastActivityAt) {
		var ret time.Time
		return ret
	}
	return *o.LastActivityAt
}

// GetLastActivityAtOk returns a tuple with the LastActivityAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetLastActivityAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastActivityAt) {
		return nil, false
	}
	return o.LastActivityAt, true
}

// HasLastActivityAt returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasLastActivityAt() bool {
	if o != nil && !IsNil(o.LastActivityAt) {
		return true
	}

	return false
}

// SetLastActivityAt gets a reference to the given time.Time and assigns it to the LastActivityAt field.
func (o *ArduinoDevicev2) SetLastActivityAt(v time.Time) {
	o.LastActivityAt = &v
}

// GetLatestWifiFwVersion returns the LatestWifiFwVersion field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetLatestWifiFwVersion() string {
	if o == nil || IsNil(o.LatestWifiFwVersion) {
		var ret string
		return ret
	}
	return *o.LatestWifiFwVersion
}

// GetLatestWifiFwVersionOk returns a tuple with the LatestWifiFwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetLatestWifiFwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LatestWifiFwVersion) {
		return nil, false
	}
	return o.LatestWifiFwVersion, true
}

// HasLatestWifiFwVersion returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasLatestWifiFwVersion() bool {
	if o != nil && !IsNil(o.LatestWifiFwVersion) {
		return true
	}

	return false
}

// SetLatestWifiFwVersion gets a reference to the given string and assigns it to the LatestWifiFwVersion field.
func (o *ArduinoDevicev2) SetLatestWifiFwVersion(v string) {
	o.LatestWifiFwVersion = &v
}

// GetLibVersion returns the LibVersion field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetLibVersion() string {
	if o == nil || IsNil(o.LibVersion) {
		var ret string
		return ret
	}
	return *o.LibVersion
}

// GetLibVersionOk returns a tuple with the LibVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetLibVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LibVersion) {
		return nil, false
	}
	return o.LibVersion, true
}

// HasLibVersion returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasLibVersion() bool {
	if o != nil && !IsNil(o.LibVersion) {
		return true
	}

	return false
}

// SetLibVersion gets a reference to the given string and assigns it to the LibVersion field.
func (o *ArduinoDevicev2) SetLibVersion(v string) {
	o.LibVersion = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ArduinoDevicev2) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *ArduinoDevicev2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ArduinoDevicev2) SetName(v string) {
	o.Name = v
}

// GetNoSketch returns the NoSketch field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetNoSketch() bool {
	if o == nil || IsNil(o.NoSketch) {
		var ret bool
		return ret
	}
	return *o.NoSketch
}

// GetNoSketchOk returns a tuple with the NoSketch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetNoSketchOk() (*bool, bool) {
	if o == nil || IsNil(o.NoSketch) {
		return nil, false
	}
	return o.NoSketch, true
}

// HasNoSketch returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasNoSketch() bool {
	if o != nil && !IsNil(o.NoSketch) {
		return true
	}

	return false
}

// SetNoSketch gets a reference to the given bool and assigns it to the NoSketch field.
func (o *ArduinoDevicev2) SetNoSketch(v bool) {
	o.NoSketch = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ArduinoDevicev2) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetOtaAvailable returns the OtaAvailable field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetOtaAvailable() bool {
	if o == nil || IsNil(o.OtaAvailable) {
		var ret bool
		return ret
	}
	return *o.OtaAvailable
}

// GetOtaAvailableOk returns a tuple with the OtaAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetOtaAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.OtaAvailable) {
		return nil, false
	}
	return o.OtaAvailable, true
}

// HasOtaAvailable returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasOtaAvailable() bool {
	if o != nil && !IsNil(o.OtaAvailable) {
		return true
	}

	return false
}

// SetOtaAvailable gets a reference to the given bool and assigns it to the OtaAvailable field.
func (o *ArduinoDevicev2) SetOtaAvailable(v bool) {
	o.OtaAvailable = &v
}

// GetOtaCompatible returns the OtaCompatible field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetOtaCompatible() bool {
	if o == nil || IsNil(o.OtaCompatible) {
		var ret bool
		return ret
	}
	return *o.OtaCompatible
}

// GetOtaCompatibleOk returns a tuple with the OtaCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetOtaCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.OtaCompatible) {
		return nil, false
	}
	return o.OtaCompatible, true
}

// HasOtaCompatible returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasOtaCompatible() bool {
	if o != nil && !IsNil(o.OtaCompatible) {
		return true
	}

	return false
}

// SetOtaCompatible gets a reference to the given bool and assigns it to the OtaCompatible field.
func (o *ArduinoDevicev2) SetOtaCompatible(v bool) {
	o.OtaCompatible = &v
}

// GetRequiredWifiFwVersion returns the RequiredWifiFwVersion field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetRequiredWifiFwVersion() string {
	if o == nil || IsNil(o.RequiredWifiFwVersion) {
		var ret string
		return ret
	}
	return *o.RequiredWifiFwVersion
}

// GetRequiredWifiFwVersionOk returns a tuple with the RequiredWifiFwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetRequiredWifiFwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredWifiFwVersion) {
		return nil, false
	}
	return o.RequiredWifiFwVersion, true
}

// HasRequiredWifiFwVersion returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasRequiredWifiFwVersion() bool {
	if o != nil && !IsNil(o.RequiredWifiFwVersion) {
		return true
	}

	return false
}

// SetRequiredWifiFwVersion gets a reference to the given string and assigns it to the RequiredWifiFwVersion field.
func (o *ArduinoDevicev2) SetRequiredWifiFwVersion(v string) {
	o.RequiredWifiFwVersion = &v
}

// GetSerial returns the Serial field value
func (o *ArduinoDevicev2) GetSerial() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Serial
}

// GetSerialOk returns a tuple with the Serial field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Serial, true
}

// SetSerial sets field value
func (o *ArduinoDevicev2) SetSerial(v string) {
	o.Serial = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetTags() map[string]interface{} {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetTagsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tags) {
		return map[string]interface{}{}, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *ArduinoDevicev2) SetTags(v map[string]interface{}) {
	o.Tags = v
}

// GetThing returns the Thing field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetThing() ArduinoThing {
	if o == nil || IsNil(o.Thing) {
		var ret ArduinoThing
		return ret
	}
	return *o.Thing
}

// GetThingOk returns a tuple with the Thing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetThingOk() (*ArduinoThing, bool) {
	if o == nil || IsNil(o.Thing) {
		return nil, false
	}
	return o.Thing, true
}

// HasThing returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasThing() bool {
	if o != nil && !IsNil(o.Thing) {
		return true
	}

	return false
}

// SetThing gets a reference to the given ArduinoThing and assigns it to the Thing field.
func (o *ArduinoDevicev2) SetThing(v ArduinoThing) {
	o.Thing = &v
}

// GetType returns the Type field value
func (o *ArduinoDevicev2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ArduinoDevicev2) SetType(v string) {
	o.Type = v
}

// GetUniqueHardwareId returns the UniqueHardwareId field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetUniqueHardwareId() string {
	if o == nil || IsNil(o.UniqueHardwareId) {
		var ret string
		return ret
	}
	return *o.UniqueHardwareId
}

// GetUniqueHardwareIdOk returns a tuple with the UniqueHardwareId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetUniqueHardwareIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueHardwareId) {
		return nil, false
	}
	return o.UniqueHardwareId, true
}

// HasUniqueHardwareId returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasUniqueHardwareId() bool {
	if o != nil && !IsNil(o.UniqueHardwareId) {
		return true
	}

	return false
}

// SetUniqueHardwareId gets a reference to the given string and assigns it to the UniqueHardwareId field.
func (o *ArduinoDevicev2) SetUniqueHardwareId(v string) {
	o.UniqueHardwareId = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ArduinoDevicev2) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value
func (o *ArduinoDevicev2) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ArduinoDevicev2) SetUserId(v string) {
	o.UserId = v
}

// GetWebhooks returns the Webhooks field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetWebhooks() []ArduinoDevicev2Webhook {
	if o == nil || IsNil(o.Webhooks) {
		var ret []ArduinoDevicev2Webhook
		return ret
	}
	return o.Webhooks
}

// GetWebhooksOk returns a tuple with the Webhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetWebhooksOk() ([]ArduinoDevicev2Webhook, bool) {
	if o == nil || IsNil(o.Webhooks) {
		return nil, false
	}
	return o.Webhooks, true
}

// HasWebhooks returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasWebhooks() bool {
	if o != nil && !IsNil(o.Webhooks) {
		return true
	}

	return false
}

// SetWebhooks gets a reference to the given []ArduinoDevicev2Webhook and assigns it to the Webhooks field.
func (o *ArduinoDevicev2) SetWebhooks(v []ArduinoDevicev2Webhook) {
	o.Webhooks = v
}

// GetWifiFwVersion returns the WifiFwVersion field value if set, zero value otherwise.
func (o *ArduinoDevicev2) GetWifiFwVersion() string {
	if o == nil || IsNil(o.WifiFwVersion) {
		var ret string
		return ret
	}
	return *o.WifiFwVersion
}

// GetWifiFwVersionOk returns a tuple with the WifiFwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2) GetWifiFwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WifiFwVersion) {
		return nil, false
	}
	return o.WifiFwVersion, true
}

// HasWifiFwVersion returns a boolean if a field has been set.
func (o *ArduinoDevicev2) HasWifiFwVersion() bool {
	if o != nil && !IsNil(o.WifiFwVersion) {
		return true
	}

	return false
}

// SetWifiFwVersion gets a reference to the given string and assigns it to the WifiFwVersion field.
func (o *ArduinoDevicev2) SetWifiFwVersion(v string) {
	o.WifiFwVersion = &v
}

func (o ArduinoDevicev2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoDevicev2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BleMac) {
		toSerialize["ble_mac"] = o.BleMac
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.DeviceStatus) {
		toSerialize["device_status"] = o.DeviceStatus
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Fqbn) {
		toSerialize["fqbn"] = o.Fqbn
	}
	toSerialize["href"] = o.Href
	toSerialize["id"] = o.Id
	if !IsNil(o.IssuerCa) {
		toSerialize["issuer_ca"] = o.IssuerCa
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.LastActivityAt) {
		toSerialize["last_activity_at"] = o.LastActivityAt
	}
	if !IsNil(o.LatestWifiFwVersion) {
		toSerialize["latest_wifi_fw_version"] = o.LatestWifiFwVersion
	}
	if !IsNil(o.LibVersion) {
		toSerialize["lib_version"] = o.LibVersion
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NoSketch) {
		toSerialize["no_sketch"] = o.NoSketch
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.OtaAvailable) {
		toSerialize["ota_available"] = o.OtaAvailable
	}
	if !IsNil(o.OtaCompatible) {
		toSerialize["ota_compatible"] = o.OtaCompatible
	}
	if !IsNil(o.RequiredWifiFwVersion) {
		toSerialize["required_wifi_fw_version"] = o.RequiredWifiFwVersion
	}
	toSerialize["serial"] = o.Serial
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Thing) {
		toSerialize["thing"] = o.Thing
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UniqueHardwareId) {
		toSerialize["unique_hardware_id"] = o.UniqueHardwareId
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	toSerialize["user_id"] = o.UserId
	if !IsNil(o.Webhooks) {
		toSerialize["webhooks"] = o.Webhooks
	}
	if !IsNil(o.WifiFwVersion) {
		toSerialize["wifi_fw_version"] = o.WifiFwVersion
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ArduinoDevicev2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"href",
		"id",
		"label",
		"name",
		"serial",
		"type",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoDevicev2 := _ArduinoDevicev2{}

	err = json.Unmarshal(data, &varArduinoDevicev2)

	if err != nil {
		return err
	}

	*o = ArduinoDevicev2(varArduinoDevicev2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ble_mac")
		delete(additionalProperties, "connection_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "device_status")
		delete(additionalProperties, "events")
		delete(additionalProperties, "fqbn")
		delete(additionalProperties, "href")
		delete(additionalProperties, "id")
		delete(additionalProperties, "issuer_ca")
		delete(additionalProperties, "label")
		delete(additionalProperties, "last_activity_at")
		delete(additionalProperties, "latest_wifi_fw_version")
		delete(additionalProperties, "lib_version")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "name")
		delete(additionalProperties, "no_sketch")
		delete(additionalProperties, "organization_id")
		delete(additionalProperties, "ota_available")
		delete(additionalProperties, "ota_compatible")
		delete(additionalProperties, "required_wifi_fw_version")
		delete(additionalProperties, "serial")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "thing")
		delete(additionalProperties, "type")
		delete(additionalProperties, "unique_hardware_id")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "webhooks")
		delete(additionalProperties, "wifi_fw_version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableArduinoDevicev2 struct {
	value *ArduinoDevicev2
	isSet bool
}

func (v NullableArduinoDevicev2) Get() *ArduinoDevicev2 {
	return v.value
}

func (v *NullableArduinoDevicev2) Set(val *ArduinoDevicev2) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoDevicev2) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoDevicev2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoDevicev2(val *ArduinoDevicev2) *NullableArduinoDevicev2 {
	return &NullableArduinoDevicev2{value: val, isSet: true}
}

func (v NullableArduinoDevicev2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoDevicev2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


