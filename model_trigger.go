/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	// A list of actions to be associated with the trigger
	Actions []CreateAction `json:"actions,omitempty"`
	// Is true if the trigger is enabled
	Active *bool `json:"active,omitempty"`
	// The description of the trigger
	Description *string `json:"description,omitempty"`
	DeviceStatusSource *DeviceStatusSource `json:"device_status_source,omitempty"`
	// The id of the trigger
	Id *string `json:"id,omitempty"`
	// The name of the trigger
	Name *string `json:"name,omitempty"`
	// Id of the property the trigger is associated to (mutually exclusive with 'device_status_source')
	PropertyId *string `json:"property_id,omitempty"`
	// If false, restore the thing from the soft deletion
	SoftDeleted *bool `json:"soft_deleted,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Trigger Trigger

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger() *Trigger {
	this := Trigger{}
	var softDeleted bool = false
	this.SoftDeleted = &softDeleted
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	var softDeleted bool = false
	this.SoftDeleted = &softDeleted
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Trigger) GetActions() []CreateAction {
	if o == nil || IsNil(o.Actions) {
		var ret []CreateAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetActionsOk() ([]CreateAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Trigger) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []CreateAction and assigns it to the Actions field.
func (o *Trigger) SetActions(v []CreateAction) {
	o.Actions = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Trigger) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Trigger) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Trigger) SetActive(v bool) {
	o.Active = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Trigger) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Trigger) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Trigger) SetDescription(v string) {
	o.Description = &v
}

// GetDeviceStatusSource returns the DeviceStatusSource field value if set, zero value otherwise.
func (o *Trigger) GetDeviceStatusSource() DeviceStatusSource {
	if o == nil || IsNil(o.DeviceStatusSource) {
		var ret DeviceStatusSource
		return ret
	}
	return *o.DeviceStatusSource
}

// GetDeviceStatusSourceOk returns a tuple with the DeviceStatusSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDeviceStatusSourceOk() (*DeviceStatusSource, bool) {
	if o == nil || IsNil(o.DeviceStatusSource) {
		return nil, false
	}
	return o.DeviceStatusSource, true
}

// HasDeviceStatusSource returns a boolean if a field has been set.
func (o *Trigger) HasDeviceStatusSource() bool {
	if o != nil && !IsNil(o.DeviceStatusSource) {
		return true
	}

	return false
}

// SetDeviceStatusSource gets a reference to the given DeviceStatusSource and assigns it to the DeviceStatusSource field.
func (o *Trigger) SetDeviceStatusSource(v DeviceStatusSource) {
	o.DeviceStatusSource = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Trigger) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Trigger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Trigger) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Trigger) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Trigger) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Trigger) SetName(v string) {
	o.Name = &v
}

// GetPropertyId returns the PropertyId field value if set, zero value otherwise.
func (o *Trigger) GetPropertyId() string {
	if o == nil || IsNil(o.PropertyId) {
		var ret string
		return ret
	}
	return *o.PropertyId
}

// GetPropertyIdOk returns a tuple with the PropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyId) {
		return nil, false
	}
	return o.PropertyId, true
}

// HasPropertyId returns a boolean if a field has been set.
func (o *Trigger) HasPropertyId() bool {
	if o != nil && !IsNil(o.PropertyId) {
		return true
	}

	return false
}

// SetPropertyId gets a reference to the given string and assigns it to the PropertyId field.
func (o *Trigger) SetPropertyId(v string) {
	o.PropertyId = &v
}

// GetSoftDeleted returns the SoftDeleted field value if set, zero value otherwise.
func (o *Trigger) GetSoftDeleted() bool {
	if o == nil || IsNil(o.SoftDeleted) {
		var ret bool
		return ret
	}
	return *o.SoftDeleted
}

// GetSoftDeletedOk returns a tuple with the SoftDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetSoftDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftDeleted) {
		return nil, false
	}
	return o.SoftDeleted, true
}

// HasSoftDeleted returns a boolean if a field has been set.
func (o *Trigger) HasSoftDeleted() bool {
	if o != nil && !IsNil(o.SoftDeleted) {
		return true
	}

	return false
}

// SetSoftDeleted gets a reference to the given bool and assigns it to the SoftDeleted field.
func (o *Trigger) SetSoftDeleted(v bool) {
	o.SoftDeleted = &v
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DeviceStatusSource) {
		toSerialize["device_status_source"] = o.DeviceStatusSource
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PropertyId) {
		toSerialize["property_id"] = o.PropertyId
	}
	if !IsNil(o.SoftDeleted) {
		toSerialize["soft_deleted"] = o.SoftDeleted
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Trigger) UnmarshalJSON(data []byte) (err error) {
	varTrigger := _Trigger{}

	err = json.Unmarshal(data, &varTrigger)

	if err != nil {
		return err
	}

	*o = Trigger(varTrigger)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "actions")
		delete(additionalProperties, "active")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device_status_source")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "property_id")
		delete(additionalProperties, "soft_deleted")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


