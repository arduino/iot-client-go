/*
Arduino IoT Cloud API

 Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Dashboardshare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dashboardshare{}

// Dashboardshare struct for Dashboardshare
type Dashboardshare struct {
	// The userID of the user you want to share the dashboard with
	UserId *string `json:"user_id,omitempty"`
	// The username of the user you want to share the dashboard with
	Username *string `json:"username,omitempty"`
}

// NewDashboardshare instantiates a new Dashboardshare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardshare() *Dashboardshare {
	this := Dashboardshare{}
	return &this
}

// NewDashboardshareWithDefaults instantiates a new Dashboardshare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardshareWithDefaults() *Dashboardshare {
	this := Dashboardshare{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Dashboardshare) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboardshare) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Dashboardshare) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Dashboardshare) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Dashboardshare) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboardshare) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Dashboardshare) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Dashboardshare) SetUsername(v string) {
	o.Username = &v
}

func (o Dashboardshare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dashboardshare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableDashboardshare struct {
	value *Dashboardshare
	isSet bool
}

func (v NullableDashboardshare) Get() *Dashboardshare {
	return v.value
}

func (v *NullableDashboardshare) Set(val *Dashboardshare) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardshare) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardshare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardshare(val *Dashboardshare) *NullableDashboardshare {
	return &NullableDashboardshare{value: val, isSet: true}
}

func (v NullableDashboardshare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardshare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


