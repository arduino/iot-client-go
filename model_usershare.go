/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
)

// checks if the Usershare type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usershare{}

// Usershare struct for Usershare
type Usershare struct {
	// The userID of the user you want to share the dashboard with
	UserId *string `json:"user_id,omitempty"`
	// The username of the user you want to share the dashboard with
	Username *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Usershare Usershare

// NewUsershare instantiates a new Usershare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsershare() *Usershare {
	this := Usershare{}
	return &this
}

// NewUsershareWithDefaults instantiates a new Usershare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsershareWithDefaults() *Usershare {
	this := Usershare{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Usershare) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usershare) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Usershare) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Usershare) SetUserId(v string) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Usershare) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usershare) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Usershare) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Usershare) SetUsername(v string) {
	o.Username = &v
}

func (o Usershare) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usershare) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Usershare) UnmarshalJSON(data []byte) (err error) {
	varUsershare := _Usershare{}

	err = json.Unmarshal(data, &varUsershare)

	if err != nil {
		return err
	}

	*o = Usershare(varUsershare)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsershare struct {
	value *Usershare
	isSet bool
}

func (v NullableUsershare) Get() *Usershare {
	return v.value
}

func (v *NullableUsershare) Set(val *Usershare) {
	v.value = val
	v.isSet = true
}

func (v NullableUsershare) IsSet() bool {
	return v.isSet
}

func (v *NullableUsershare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsershare(val *Usershare) *NullableUsershare {
	return &NullableUsershare{value: val, isSet: true}
}

func (v NullableUsershare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsershare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


