/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArduinoDevicev2Pass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoDevicev2Pass{}

// ArduinoDevicev2Pass DeviceCertV2 describes a password associated to a device (default view)
type ArduinoDevicev2Pass struct {
	// Whether the password is set or not
	Set bool `json:"set"`
	// A random suggested password
	SuggestedPassword *string `json:"suggested_password,omitempty"`
}

type _ArduinoDevicev2Pass ArduinoDevicev2Pass

// NewArduinoDevicev2Pass instantiates a new ArduinoDevicev2Pass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoDevicev2Pass(set bool) *ArduinoDevicev2Pass {
	this := ArduinoDevicev2Pass{}
	this.Set = set
	return &this
}

// NewArduinoDevicev2PassWithDefaults instantiates a new ArduinoDevicev2Pass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoDevicev2PassWithDefaults() *ArduinoDevicev2Pass {
	this := ArduinoDevicev2Pass{}
	return &this
}

// GetSet returns the Set field value
func (o *ArduinoDevicev2Pass) GetSet() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Set
}

// GetSetOk returns a tuple with the Set field value
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Pass) GetSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Set, true
}

// SetSet sets field value
func (o *ArduinoDevicev2Pass) SetSet(v bool) {
	o.Set = v
}

// GetSuggestedPassword returns the SuggestedPassword field value if set, zero value otherwise.
func (o *ArduinoDevicev2Pass) GetSuggestedPassword() string {
	if o == nil || IsNil(o.SuggestedPassword) {
		var ret string
		return ret
	}
	return *o.SuggestedPassword
}

// GetSuggestedPasswordOk returns a tuple with the SuggestedPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoDevicev2Pass) GetSuggestedPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SuggestedPassword) {
		return nil, false
	}
	return o.SuggestedPassword, true
}

// HasSuggestedPassword returns a boolean if a field has been set.
func (o *ArduinoDevicev2Pass) HasSuggestedPassword() bool {
	if o != nil && !IsNil(o.SuggestedPassword) {
		return true
	}

	return false
}

// SetSuggestedPassword gets a reference to the given string and assigns it to the SuggestedPassword field.
func (o *ArduinoDevicev2Pass) SetSuggestedPassword(v string) {
	o.SuggestedPassword = &v
}

func (o ArduinoDevicev2Pass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoDevicev2Pass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["set"] = o.Set
	if !IsNil(o.SuggestedPassword) {
		toSerialize["suggested_password"] = o.SuggestedPassword
	}
	return toSerialize, nil
}

func (o *ArduinoDevicev2Pass) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"set",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoDevicev2Pass := _ArduinoDevicev2Pass{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoDevicev2Pass)

	if err != nil {
		return err
	}

	*o = ArduinoDevicev2Pass(varArduinoDevicev2Pass)

	return err
}

type NullableArduinoDevicev2Pass struct {
	value *ArduinoDevicev2Pass
	isSet bool
}

func (v NullableArduinoDevicev2Pass) Get() *ArduinoDevicev2Pass {
	return v.value
}

func (v *NullableArduinoDevicev2Pass) Set(val *ArduinoDevicev2Pass) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoDevicev2Pass) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoDevicev2Pass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoDevicev2Pass(val *ArduinoDevicev2Pass) *NullableArduinoDevicev2Pass {
	return &NullableArduinoDevicev2Pass{value: val, isSet: true}
}

func (v NullableArduinoDevicev2Pass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoDevicev2Pass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


