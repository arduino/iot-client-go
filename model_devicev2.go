/*
Arduino IoT Cloud API

 Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iot

import (
	"encoding/json"
)

// checks if the Devicev2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Devicev2{}

// Devicev2 DeviceV2 describes a device.
type Devicev2 struct {
	// The type of the connections selected by the user when multiple connections are available
	ConnectionType *string `json:"connection_type,omitempty"`
	// The fully qualified board name
	Fqbn *string `json:"fqbn,omitempty"`
	// The friendly name of the device
	Name *string `json:"name,omitempty"`
	// The serial uuid of the device
	Serial *string `json:"serial,omitempty"`
	// The type of the device
	Type *string `json:"type,omitempty"`
	// The user_id associated to the device. If absent it will be inferred from the authentication header
	UserId *string `json:"user_id,omitempty"`
	// The version of the NINA/WIFI101 firmware running on the device
	WifiFwVersion *string `json:"wifi_fw_version,omitempty"`
}

// NewDevicev2 instantiates a new Devicev2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicev2() *Devicev2 {
	this := Devicev2{}
	return &this
}

// NewDevicev2WithDefaults instantiates a new Devicev2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicev2WithDefaults() *Devicev2 {
	this := Devicev2{}
	return &this
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *Devicev2) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *Devicev2) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *Devicev2) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetFqbn returns the Fqbn field value if set, zero value otherwise.
func (o *Devicev2) GetFqbn() string {
	if o == nil || IsNil(o.Fqbn) {
		var ret string
		return ret
	}
	return *o.Fqbn
}

// GetFqbnOk returns a tuple with the Fqbn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetFqbnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqbn) {
		return nil, false
	}
	return o.Fqbn, true
}

// HasFqbn returns a boolean if a field has been set.
func (o *Devicev2) HasFqbn() bool {
	if o != nil && !IsNil(o.Fqbn) {
		return true
	}

	return false
}

// SetFqbn gets a reference to the given string and assigns it to the Fqbn field.
func (o *Devicev2) SetFqbn(v string) {
	o.Fqbn = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Devicev2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Devicev2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Devicev2) SetName(v string) {
	o.Name = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *Devicev2) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *Devicev2) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *Devicev2) SetSerial(v string) {
	o.Serial = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Devicev2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Devicev2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Devicev2) SetType(v string) {
	o.Type = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Devicev2) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Devicev2) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Devicev2) SetUserId(v string) {
	o.UserId = &v
}

// GetWifiFwVersion returns the WifiFwVersion field value if set, zero value otherwise.
func (o *Devicev2) GetWifiFwVersion() string {
	if o == nil || IsNil(o.WifiFwVersion) {
		var ret string
		return ret
	}
	return *o.WifiFwVersion
}

// GetWifiFwVersionOk returns a tuple with the WifiFwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Devicev2) GetWifiFwVersionOk() (*string, bool) {
	if o == nil || IsNil(o.WifiFwVersion) {
		return nil, false
	}
	return o.WifiFwVersion, true
}

// HasWifiFwVersion returns a boolean if a field has been set.
func (o *Devicev2) HasWifiFwVersion() bool {
	if o != nil && !IsNil(o.WifiFwVersion) {
		return true
	}

	return false
}

// SetWifiFwVersion gets a reference to the given string and assigns it to the WifiFwVersion field.
func (o *Devicev2) SetWifiFwVersion(v string) {
	o.WifiFwVersion = &v
}

func (o Devicev2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Devicev2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionType) {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if !IsNil(o.Fqbn) {
		toSerialize["fqbn"] = o.Fqbn
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.WifiFwVersion) {
		toSerialize["wifi_fw_version"] = o.WifiFwVersion
	}
	return toSerialize, nil
}

type NullableDevicev2 struct {
	value *Devicev2
	isSet bool
}

func (v NullableDevicev2) Get() *Devicev2 {
	return v.value
}

func (v *NullableDevicev2) Set(val *Devicev2) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicev2) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicev2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicev2(val *Devicev2) *NullableDevicev2 {
	return &NullableDevicev2{value: val, isSet: true}
}

func (v NullableDevicev2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicev2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


