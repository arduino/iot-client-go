/*
Arduino IoT Cloud API

Testing DevicesV2CertsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package iot

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/arduino/iot-client-go"
)

func Test_iot_DevicesV2CertsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevicesV2CertsApiService DevicesV2CertsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DevicesV2CertsApi.DevicesV2CertsCreate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesV2CertsApiService DevicesV2CertsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var id string

		httpRes, err := apiClient.DevicesV2CertsApi.DevicesV2CertsDelete(context.Background(), cid, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesV2CertsApiService DevicesV2CertsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.DevicesV2CertsApi.DevicesV2CertsList(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesV2CertsApiService DevicesV2CertsShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var id string

		resp, httpRes, err := apiClient.DevicesV2CertsApi.DevicesV2CertsShow(context.Background(), cid, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevicesV2CertsApiService DevicesV2CertsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cid string
		var id string

		resp, httpRes, err := apiClient.DevicesV2CertsApi.DevicesV2CertsUpdate(context.Background(), cid, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
