/*
Arduino IoT Cloud API

 Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PropertiesValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertiesValue{}

// PropertiesValue struct for PropertiesValue
type PropertiesValue struct {
	// The name of the property
	Name string `json:"name"`
	// The type of the property
	Type string `json:"type"`
	// The last value of the property
	Value interface{} `json:"value"`
}

// NewPropertiesValue instantiates a new PropertiesValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertiesValue(name string, type_ string, value interface{}) *PropertiesValue {
	this := PropertiesValue{}
	this.Name = name
	this.Type = type_
	this.Value = value
	return &this
}

// NewPropertiesValueWithDefaults instantiates a new PropertiesValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertiesValueWithDefaults() *PropertiesValue {
	this := PropertiesValue{}
	var type_ string = "infer"
	this.Type = type_
	return &this
}

// GetName returns the Name field value
func (o *PropertiesValue) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PropertiesValue) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PropertiesValue) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *PropertiesValue) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PropertiesValue) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PropertiesValue) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PropertiesValue) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PropertiesValue) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PropertiesValue) SetValue(v interface{}) {
	o.Value = v
}

func (o PropertiesValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertiesValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePropertiesValue struct {
	value *PropertiesValue
	isSet bool
}

func (v NullablePropertiesValue) Get() *PropertiesValue {
	return v.value
}

func (v *NullablePropertiesValue) Set(val *PropertiesValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertiesValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertiesValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertiesValue(val *PropertiesValue) *NullablePropertiesValue {
	return &NullablePropertiesValue{value: val, isSet: true}
}

func (v NullablePropertiesValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertiesValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


