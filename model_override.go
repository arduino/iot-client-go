/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Override type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Override{}

// Override struct for Override
type Override struct {
	// The id of the new thing to link
	NewThingId string `json:"new_thing_id"`
	// The id of the thing to override
	OldThingId string `json:"old_thing_id"`
}

// NewOverride instantiates a new Override object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverride(newThingId string, oldThingId string) *Override {
	this := Override{}
	this.NewThingId = newThingId
	this.OldThingId = oldThingId
	return &this
}

// NewOverrideWithDefaults instantiates a new Override object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverrideWithDefaults() *Override {
	this := Override{}
	return &this
}

// GetNewThingId returns the NewThingId field value
func (o *Override) GetNewThingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewThingId
}

// GetNewThingIdOk returns a tuple with the NewThingId field value
// and a boolean to check if the value has been set.
func (o *Override) GetNewThingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewThingId, true
}

// SetNewThingId sets field value
func (o *Override) SetNewThingId(v string) {
	o.NewThingId = v
}

// GetOldThingId returns the OldThingId field value
func (o *Override) GetOldThingId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OldThingId
}

// GetOldThingIdOk returns a tuple with the OldThingId field value
// and a boolean to check if the value has been set.
func (o *Override) GetOldThingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OldThingId, true
}

// SetOldThingId sets field value
func (o *Override) SetOldThingId(v string) {
	o.OldThingId = v
}

func (o Override) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Override) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["new_thing_id"] = o.NewThingId
	toSerialize["old_thing_id"] = o.OldThingId
	return toSerialize, nil
}

type NullableOverride struct {
	value *Override
	isSet bool
}

func (v NullableOverride) Get() *Override {
	return v.value
}

func (v *NullableOverride) Set(val *Override) {
	v.value = val
	v.isSet = true
}

func (v NullableOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverride(val *Override) *NullableOverride {
	return &NullableOverride{value: val, isSet: true}
}

func (v NullableOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


