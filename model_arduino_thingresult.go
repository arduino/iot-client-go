/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArduinoThingresult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArduinoThingresult{}

// ArduinoThingresult ArduinoThingresult media type (default view)
type ArduinoThingresult struct {
	// UUID of the attached device
	DeviceId *string `json:"device_id,omitempty"`
	// UUID of the created Thing
	Id string `json:"id"`
	// UUID of the created Sketch
	SketchId string `json:"sketch_id"`
}

type _ArduinoThingresult ArduinoThingresult

// NewArduinoThingresult instantiates a new ArduinoThingresult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArduinoThingresult(id string, sketchId string) *ArduinoThingresult {
	this := ArduinoThingresult{}
	this.Id = id
	this.SketchId = sketchId
	return &this
}

// NewArduinoThingresultWithDefaults instantiates a new ArduinoThingresult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArduinoThingresultWithDefaults() *ArduinoThingresult {
	this := ArduinoThingresult{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *ArduinoThingresult) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArduinoThingresult) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *ArduinoThingresult) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *ArduinoThingresult) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetId returns the Id field value
func (o *ArduinoThingresult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArduinoThingresult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArduinoThingresult) SetId(v string) {
	o.Id = v
}

// GetSketchId returns the SketchId field value
func (o *ArduinoThingresult) GetSketchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SketchId
}

// GetSketchIdOk returns a tuple with the SketchId field value
// and a boolean to check if the value has been set.
func (o *ArduinoThingresult) GetSketchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SketchId, true
}

// SetSketchId sets field value
func (o *ArduinoThingresult) SetSketchId(v string) {
	o.SketchId = v
}

func (o ArduinoThingresult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArduinoThingresult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	toSerialize["id"] = o.Id
	toSerialize["sketch_id"] = o.SketchId
	return toSerialize, nil
}

func (o *ArduinoThingresult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"sketch_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArduinoThingresult := _ArduinoThingresult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArduinoThingresult)

	if err != nil {
		return err
	}

	*o = ArduinoThingresult(varArduinoThingresult)

	return err
}

type NullableArduinoThingresult struct {
	value *ArduinoThingresult
	isSet bool
}

func (v NullableArduinoThingresult) Get() *ArduinoThingresult {
	return v.value
}

func (v *NullableArduinoThingresult) Set(val *ArduinoThingresult) {
	v.value = val
	v.isSet = true
}

func (v NullableArduinoThingresult) IsSet() bool {
	return v.isSet
}

func (v *NullableArduinoThingresult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArduinoThingresult(val *ArduinoThingresult) *NullableArduinoThingresult {
	return &NullableArduinoThingresult{value: val, isSet: true}
}

func (v NullableArduinoThingresult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArduinoThingresult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


