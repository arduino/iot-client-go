/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LoraDevicesV1APIService LoraDevicesV1API service
type LoraDevicesV1APIService service

type ApiLoraDevicesV1CreateRequest struct {
	ctx context.Context
	ApiService *LoraDevicesV1APIService
	createLoraDevicesV1Payload *CreateLoraDevicesV1Payload
	xOrganization *string
}

func (r ApiLoraDevicesV1CreateRequest) CreateLoraDevicesV1Payload(createLoraDevicesV1Payload CreateLoraDevicesV1Payload) ApiLoraDevicesV1CreateRequest {
	r.createLoraDevicesV1Payload = &createLoraDevicesV1Payload
	return r
}

// Organization space identifer (optional)
func (r ApiLoraDevicesV1CreateRequest) XOrganization(xOrganization string) ApiLoraDevicesV1CreateRequest {
	r.xOrganization = &xOrganization
	return r
}

func (r ApiLoraDevicesV1CreateRequest) Execute() (*ArduinoLoradevicev1, *http.Response, error) {
	return r.ApiService.LoraDevicesV1CreateExecute(r)
}

/*
LoraDevicesV1Create create lora_devices_v1

Create a new lora device. Its info are saved on our database, and on the lora provider network. Creates a device_v2 automatically

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLoraDevicesV1CreateRequest
*/
func (a *LoraDevicesV1APIService) LoraDevicesV1Create(ctx context.Context) ApiLoraDevicesV1CreateRequest {
	return ApiLoraDevicesV1CreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ArduinoLoradevicev1
func (a *LoraDevicesV1APIService) LoraDevicesV1CreateExecute(r ApiLoraDevicesV1CreateRequest) (*ArduinoLoradevicev1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArduinoLoradevicev1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LoraDevicesV1APIService.LoraDevicesV1Create")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iot/v1/lora-devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createLoraDevicesV1Payload == nil {
		return localVarReturnValue, nil, reportError("createLoraDevicesV1Payload is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.arduino.loradevicev1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xOrganization != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Organization", r.xOrganization, "simple", "")
	}
	// body params
	localVarPostBody = r.createLoraDevicesV1Payload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
