/*
Arduino IoT Cloud API

Provides a set of endpoints to manage Arduino IoT Cloud **Devices**, **Things**, **Properties** and **Timeseries**. This API can be called just with any HTTP Client, or using one of these clients:  * [Javascript NPM package](https://www.npmjs.com/package/@arduino/arduino-iot-client)  * [Python PYPI Package](https://pypi.org/project/arduino-iot-client/)  * [Golang Module](https://github.com/arduino/iot-client-go)

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"encoding/json"
	"fmt"
)

// checks if the DeviceStatusSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceStatusSource{}

// DeviceStatusSource struct for DeviceStatusSource
type DeviceStatusSource struct {
	// The matching criteria of the trigger, this allows to interpret device_ids as an inclusion or exclusion list
	Criteria string `json:"criteria"`
	// A list of device IDs to be included in or excluded from the trigger (see criteria). Mutually exclusive with property_id.
	DeviceIds []string `json:"device_ids,omitempty"`
	// Amount of seconds the trigger will wait before the device will be considered disconnected (requires 'device_id')
	GracePeriodOffline *int32 `json:"grace_period_offline,omitempty"`
	// Amount of seconds the trigger will wait before the device will be considered connected (requires 'device_id')
	GracePeriodOnline *int32 `json:"grace_period_online,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeviceStatusSource DeviceStatusSource

// NewDeviceStatusSource instantiates a new DeviceStatusSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceStatusSource(criteria string) *DeviceStatusSource {
	this := DeviceStatusSource{}
	this.Criteria = criteria
	return &this
}

// NewDeviceStatusSourceWithDefaults instantiates a new DeviceStatusSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceStatusSourceWithDefaults() *DeviceStatusSource {
	this := DeviceStatusSource{}
	return &this
}

// GetCriteria returns the Criteria field value
func (o *DeviceStatusSource) GetCriteria() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Criteria
}

// GetCriteriaOk returns a tuple with the Criteria field value
// and a boolean to check if the value has been set.
func (o *DeviceStatusSource) GetCriteriaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Criteria, true
}

// SetCriteria sets field value
func (o *DeviceStatusSource) SetCriteria(v string) {
	o.Criteria = v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *DeviceStatusSource) GetDeviceIds() []string {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []string
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatusSource) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *DeviceStatusSource) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *DeviceStatusSource) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

// GetGracePeriodOffline returns the GracePeriodOffline field value if set, zero value otherwise.
func (o *DeviceStatusSource) GetGracePeriodOffline() int32 {
	if o == nil || IsNil(o.GracePeriodOffline) {
		var ret int32
		return ret
	}
	return *o.GracePeriodOffline
}

// GetGracePeriodOfflineOk returns a tuple with the GracePeriodOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatusSource) GetGracePeriodOfflineOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriodOffline) {
		return nil, false
	}
	return o.GracePeriodOffline, true
}

// HasGracePeriodOffline returns a boolean if a field has been set.
func (o *DeviceStatusSource) HasGracePeriodOffline() bool {
	if o != nil && !IsNil(o.GracePeriodOffline) {
		return true
	}

	return false
}

// SetGracePeriodOffline gets a reference to the given int32 and assigns it to the GracePeriodOffline field.
func (o *DeviceStatusSource) SetGracePeriodOffline(v int32) {
	o.GracePeriodOffline = &v
}

// GetGracePeriodOnline returns the GracePeriodOnline field value if set, zero value otherwise.
func (o *DeviceStatusSource) GetGracePeriodOnline() int32 {
	if o == nil || IsNil(o.GracePeriodOnline) {
		var ret int32
		return ret
	}
	return *o.GracePeriodOnline
}

// GetGracePeriodOnlineOk returns a tuple with the GracePeriodOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceStatusSource) GetGracePeriodOnlineOk() (*int32, bool) {
	if o == nil || IsNil(o.GracePeriodOnline) {
		return nil, false
	}
	return o.GracePeriodOnline, true
}

// HasGracePeriodOnline returns a boolean if a field has been set.
func (o *DeviceStatusSource) HasGracePeriodOnline() bool {
	if o != nil && !IsNil(o.GracePeriodOnline) {
		return true
	}

	return false
}

// SetGracePeriodOnline gets a reference to the given int32 and assigns it to the GracePeriodOnline field.
func (o *DeviceStatusSource) SetGracePeriodOnline(v int32) {
	o.GracePeriodOnline = &v
}

func (o DeviceStatusSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceStatusSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["criteria"] = o.Criteria
	if !IsNil(o.DeviceIds) {
		toSerialize["device_ids"] = o.DeviceIds
	}
	if !IsNil(o.GracePeriodOffline) {
		toSerialize["grace_period_offline"] = o.GracePeriodOffline
	}
	if !IsNil(o.GracePeriodOnline) {
		toSerialize["grace_period_online"] = o.GracePeriodOnline
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeviceStatusSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"criteria",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeviceStatusSource := _DeviceStatusSource{}

	err = json.Unmarshal(data, &varDeviceStatusSource)

	if err != nil {
		return err
	}

	*o = DeviceStatusSource(varDeviceStatusSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "criteria")
		delete(additionalProperties, "device_ids")
		delete(additionalProperties, "grace_period_offline")
		delete(additionalProperties, "grace_period_online")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeviceStatusSource struct {
	value *DeviceStatusSource
	isSet bool
}

func (v NullableDeviceStatusSource) Get() *DeviceStatusSource {
	return v.value
}

func (v *NullableDeviceStatusSource) Set(val *DeviceStatusSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceStatusSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceStatusSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceStatusSource(val *DeviceStatusSource) *NullableDeviceStatusSource {
	return &NullableDeviceStatusSource{value: val, isSet: true}
}

func (v NullableDeviceStatusSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceStatusSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


